@page "/addsalle"
@using SAE_CLIENTGestion.Models
@using SAE_CLIENTGestion.Models.DTO
@using SAE_CLIENTGestion.ViewModels
@inject SallesViewModel ViewModel
@inject NavigationManager NavigationManager

<PageTitle>Ajouter une Salle</PageTitle>

<style>
    .card {
        transition: all 0.3s ease;
    }

        .card:hover {
            box-shadow: 0 .5rem 1rem rgba(0,0,0,.1) !important;
        }
</style>

<div class="container-fluid p-4">
    <div class="card shadow border-0 rounded-3">
        <div class="card-header py-4 border-bottom border-light" style="background-color: #a1a1a1">
            <div class="d-flex justify-content-between align-items-center px-2">
                <div class="d-flex align-items-center gap-2">
                    <i class="bi bi-door-open fs-4 text-white"></i>
                    <h2 class="mb-0 fw-bold text-white">Nouvelle Salle</h2>
                </div>
                <button class="btn btn-light" @onclick="ReturnToSalles">
                    <i class="bi bi-arrow-left"></i> Retour
                </button>
            </div>
        </div>

        <div class="card-body p-4">
            <EditForm Model="@currentSalleDTO" OnValidSubmit="HandleValidSubmit">
                <DataAnnotationsValidator />
                <ValidationSummary />

                <!-- Informations de base -->
                <div class="row">
                    <div class="col-md-6 mb-3">
                        <label class="form-label">Nom</label>
                        <InputText class="form-control" @bind-Value="currentSalleDTO.Nom" />
                        <ValidationMessage For="@(() => currentSalleDTO.Nom)" />
                    </div>

                    <div class="col-md-6 mb-3">
                        <label class="form-label">Surface (m²)</label>
                        <InputNumber class="form-control" @bind-Value="currentSalleDTO.Surface" />
                        <ValidationMessage For="@(() => currentSalleDTO.Surface)" />
                    </div>
                </div>

                <div class="row">
                    <div class="col-md-6 mb-3">
                        <label class="form-label">Bâtiment</label>
                        <InputSelect class="form-control" @bind-Value="currentSalleDTO.BatimentId">
                            <option value="">Sélectionner un bâtiment</option>
                            @foreach (var batiment in ViewModel.Batiments)
                            {
                                <option value="@batiment.BatimentId">@batiment.Nom</option>
                            }
                        </InputSelect>
                        <ValidationMessage For="@(() => currentSalleDTO.BatimentId)" />
                    </div>

                    <div class="col-md-6 mb-3">
                        <label class="form-label">Type de Salle</label>
                        <InputSelect class="form-control" @bind-Value="currentSalleDTO.TypeSalleId">
                            <option value="">Sélectionner un type de salle</option>
                            @foreach (var typeSalle in ViewModel.TypesSalle)
                            {
                                <option value="@typeSalle.TypeSalleId">@typeSalle.Nom</option>
                            }
                        </InputSelect>
                        <ValidationMessage For="@(() => currentSalleDTO.TypeSalleId)" />
                    </div>
                </div>

                <!-- Configuration des murs -->
                <div class="card mt-4">
                    <div class="card-header d-flex justify-content-between align-items-center">
                        <span>Configuration des murs</span>
                        <button type="button" class="btn btn-sm btn-outline-primary" @onclick="AjouterMur">
                            <i class="fas fa-plus"></i> Ajouter un mur
                        </button>
                    </div>
                    <div class="card-body">
                        @if (!mursList.Any())
                        {
                            <div class="text-center text-muted">
                                Aucun mur configuré. Cliquez sur "Ajouter un mur" pour commencer.
                            </div>
                        }
                        else
                        {
                            <div class="row">
                                @foreach (var mur in mursList)
                                {
                                    <div class="col-md-6 mb-3">
                                        <div class="card">
                                            <div class="card-header d-flex justify-content-between align-items-center">
                                                <span>Mur @(mursList.IndexOf(mur) + 1)</span>
                                                <button type="button" class="btn btn-sm btn-outline-danger"
                                                        @onclick="() => SupprimerMur(mur)">
                                                    <i class="fas fa-trash"></i>
                                                </button>
                                            </div>
                                            <div class="card-body">
                                                <div class="mb-2">
                                                    <label class="form-label">Nom</label>
                                                    <InputText class="form-control" @bind-Value="mur.Nom" />
                                                </div>
                                                <div class="mb-2">
                                                    <label class="form-label">Longueur (m)</label>
                                                    <InputNumber class="form-control" @bind-Value="mur.Longueur" />
                                                </div>
                                                <div class="mb-2">
                                                    <label class="form-label">Hauteur (m)</label>
                                                    <InputNumber class="form-control" @bind-Value="mur.Hauteur" />
                                                </div>
                                                <div class="mb-2">
                                                    <label class="form-label">Position</label>
                                                    <InputSelect class="form-control" @bind-Value="mur.Orientation">
                                                        <option value="">Sélectionner une position</option>
                                                        @foreach (Models.Orientation orientation in Enum.GetValues(typeof(Models.Orientation)))
                                                        {
                                                            <option value="@orientation">@orientation</option>
                                                        }
                                                    </InputSelect>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                }
                            </div>
                        }
                    </div>
                </div>

                <!-- Boutons de validation -->
                <div class="mt-4">
                    <button type="submit" class="btn btn-primary me-2">Enregistrer</button>
                    <button type="button" class="btn btn-secondary" @onclick="ReturnToSalles">Annuler</button>
                </div>
            </EditForm>
        </div>
    </div>
</div>

@code {
    private SalleDTO currentSalleDTO = new();
    private List<Mur> mursList = new();

    private void AjouterMur()
    {
        mursList.Add(new Mur());
        StateHasChanged();
    }

    private void SupprimerMur(Mur mur)
    {
        mursList.Remove(mur);
        StateHasChanged();
    }

    protected override async Task OnInitializedAsync()
    {
        await ViewModel.LoadDataAsync();
    }

    private async Task HandleValidSubmit()
    {
        try
        {
            // Créer d'abord la salle
            var createdSalle = await ViewModel.AddSalleAsync(currentSalleDTO);

            if (createdSalle != null)
            {
                // Ajouter chaque mur configuré
                foreach (var mur in mursList)
                {
                    mur.SalleId = createdSalle.SalleId;
                    await ViewModel.AddMurAsync(mur.Nom, mur.Orientation, mur.Longueur, mur.Hauteur, createdSalle.SalleId);
                }

                // Rediriger vers la page des salles avec un message de succès
                NavigationManager.NavigateTo("/salles");
                ViewModel.SuccessMessage = "La salle a été créée avec succès.";
            }
        }
        catch (Exception ex)
        {
            ViewModel.ErrorMessage = "Une erreur est survenue lors de la création de la salle : " + ex.Message;
        }
    }

    private void ReturnToSalles()
    {
        NavigationManager.NavigateTo("/salles");
    }
}