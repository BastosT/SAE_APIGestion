@page "/batiments"
@using SAE_CLIENTGestion.Models
@using SAE_CLIENTGestion.Models.DTO
@using SAE_CLIENTGestion.ViewModels
@inject IJSRuntime JS
@inject BatimentsViewModel ViewModel

<PageTitle>Gestion des Bâtiments</PageTitle>

<style>
    .custom-table tr:hover {
        background-color: rgba(var(--bs-primary-rgb), 0.03) !important;
    }

    .btn-light:hover {
        background-color: var(--bs-light);
        transform: translateY(-1px);
        transition: all 0.2s ease;
    }

    .card {
        transition: all 0.3s ease;
    }

        .card:hover {
            box-shadow: 0 .5rem 1rem rgba(0,0,0,.1) !important;
        }

    .hover-card {
        transition: all 0.3s ease;
    }

        .hover-card:hover {
            transform: translateY(-2px);
            box-shadow: 0 .5rem 1rem rgba(0,0,0,.08) !important;
        }
</style>

<div class="container-fluid main-content overflow-auto">
    @if (!string.IsNullOrEmpty(ViewModel.SuccessMessage))
    {
        <div class="alert alert-success alert-dismissible fade show custom-alert" role="alert">
            @ViewModel.SuccessMessage
            <button type="button" class="btn-close" @onclick="() => ViewModel.SuccessMessage = null"></button>
        </div>
    }

    @if (!string.IsNullOrEmpty(ViewModel.ErrorMessage))
    {
        <div class="alert alert-danger alert-dismissible fade show custom-alert" role="alert">
            @ViewModel.ErrorMessage
            <button type="button" class="btn-close" @onclick="() => ViewModel.ErrorMessage = null"></button>
        </div>
    }

    <!-- Section Batiment-->
    <div class="container-fluid p-4">
        <div class="card shadow border-0 rounded-3">
            <!-- Header avec gradient subtil -->
            <div class="card-header py-4 border-bottom border-light" style="background-color: #a1a1a1">
                <div class="d-flex justify-content-between align-items-center px-2">
                    <div class="d-flex align-items-center gap-2">
                        <i class="bi bi-building fs-4 text-white"></i>
                        <h3 class="mb-0 fw-bold text-white">Bâtiments</h3>
                    </div>
                    <button class="btn btn-primary d-flex align-items-center gap-3 rounded-pill px-4 py-2 shadow-sm"
                            @onclick="() => { currentBatiment = new(); showBatimentModal = true; isNewBatiment = true; }">
                        <i class="bi bi-plus-circle-fill fs-5"></i>
                        <span class="fw-medium">Nouveau Bâtiment</span>
                    </button>
                </div>
            </div>

            <div class="p-4">
                @if (ViewModel.IsLoading)
                {
                    <div class="d-flex flex-column justify-content-center align-items-center py-5">
                        <div class="spinner-border mb-3" role="status">
                            <span class="visually-hidden">Chargement...</span>
                        </div>
                        <span class="text-muted">Chargement des bâtiments...</span>
                    </div>
                }
                else if (!ViewModel.Batiments.Any())
                {
                    <div class="alert alert-info border-0 shadow-sm d-flex align-items-center m-3 rounded-3">
                        <i class="bi bi-info-circle-fill me-3 fs-4"></i>
                        <div>
                            <h6 class="mb-0 fw-semibold">Aucun bâtiment</h6>
                            <small class="text-muted">Commencez par créer votre premier bâtiment</small>
                        </div>
                    </div>
                }
                else
                {
                    <div class="table-responsive">
                        <table class="table table-hover align-middle mb-0 custom-table">
                            <thead class="bg-light border-bottom">
                                <tr>
                                    <th class="fw-semibold px-4 py-3 border-0">
                                        <div class="text-primary">Nom</div>
                                    </th>
                                    <th class="fw-semibold px-4 py-3 border-0">
                                        <div class="text-primary">Adresse</div>
                                    </th>
                                    <th class="text-end fw-semibold px-4 py-3 border-0">
                                        <div class="text-primary">Actions</div>
                                    </th>
                                </tr>
                            </thead>
                            <tbody class="border-top-0">
                                @foreach (var batiment in ViewModel.Batiments)
                                {
                                    <tr class="border-bottom">
                                        <td class="px-4 py-3">
                                            <div class="fw-semibold">@batiment.Nom</div>
                                        </td>
                                        <td class="px-4 py-3 fw-semibold">@batiment.Adresse</td>
                                        <td class="px-4 py-3 text-end">
                                            <div class="btn-group">
                                                <button class="btn btn-light btn-sm rounded-start-2 shadow-sm me-1"
                                                        @onclick="() => EditBatiment(batiment)"
                                                        data-bs-toggle="tooltip"
                                                        title="Modifier">
                                                    <i class="bi bi-pencil-square text-black"></i>
                                                </button>
                                                <button class="btn btn-light btn-sm rounded-end-2 shadow-sm"
                                                        @onclick="() => DeleteBatiment(batiment)"
                                                        data-bs-toggle="tooltip"
                                                        title="Supprimer">
                                                    <i class="bi bi-trash text-danger"></i>
                                                </button>
                                            </div>
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                }
            </div>
        </div>
    </div>

    <!-- Modal pour Ajout/Modification de Batiment -->
    @if (showBatimentModal)
    {
        <div class="modal-backdrop fade show" style="opacity: 0.8; background-color: black; position: fixed; top: 0; left: 0; width: 100vw; height: 100vh; z-index: 1040;"></div>
        <div class="modal fade show" style="display: block; z-index: 1041;" tabindex="-1">
            <div class="modal-dialog modal-dialog-centered">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">@(isNewBatiment ? "Nouveau Batiment" : "Modifier le Batiment")</h5>
                        <button type="button" class="btn-close" @onclick="CloseBatimentModal"></button>
                    </div>
                    <div class="modal-body">
                        <EditForm Model="@currentBatiment" OnValidSubmit="HandleBatimentSubmit">
                            <DataAnnotationsValidator />
                            <ValidationSummary />
                            <div class="mb-3">
                                <label class="form-label">Nom</label>
                                <InputText class="form-control" @bind-Value="currentBatiment.Nom" />
                                <ValidationMessage For="@(() => currentBatiment.Nom)" />
                            </div>
                            <div class="mb-3">
                                <label class="form-label">Adresse</label>
                                <InputText class="form-control" @bind-Value="currentBatiment.Adresse" />
                                <ValidationMessage For="@(() => currentBatiment.Adresse)" />
                            </div>
                            <div class="mt-4">
                                <button type="submit" class="btn btn-primary me-2">Enregistrer</button>
                                <button type="button" class="btn btn-secondary" @onclick="CloseBatimentModal">Annuler</button>
                            </div>
                        </EditForm>
                    </div>
                </div>
            </div>
        </div>
    }

    <!-- Modal de confirmation pour la suppression -->
    @if (showDeleteConfirmation)
    {
        <div class="modal-backdrop fade show" style="opacity: 0.8; background-color: black; position: fixed; top: 0; left: 0; width: 100vw; height: 100vh; z-index: 1040;"></div>
        <div class="modal fade show" style="display: block; z-index: 1041;" tabindex="-1">
            <div class="modal-dialog modal-dialog-centered">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">Confirmer la suppression</h5>
                        <button type="button" class="btn-close" @onclick="() => showDeleteConfirmation = false"></button>
                    </div>
                    <div class="modal-body">
                        <p>Êtes-vous sûr de vouloir supprimer ce bâtiment ?</p>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" @onclick="() => showDeleteConfirmation = false">Annuler</button>
                        <button type="button" class="btn btn-danger" @onclick="ConfirmDeleteBatiment">Supprimer</button>
                    </div>
                </div>
            </div>
        </div>
    }
</div>

@code {
    private bool showBatimentModal = false;
    private bool showDeleteConfirmation = false;
    private bool isNewBatiment = false;
    private BatimentDTO currentBatiment = new();
    private BatimentDTO batimentToDelete;

    protected override async Task OnInitializedAsync()
    {
        await ViewModel.LoadDataAsync();
    }

    private void EditBatiment(BatimentDTO batiment)
    {
        currentBatiment = new BatimentDTO
            {
                BatimentId = batiment.BatimentId,
                Nom = batiment.Nom,
                Adresse = batiment.Adresse,
            };
        isNewBatiment = false;
        showBatimentModal = true;
    }

    private void DeleteBatiment(BatimentDTO batiment)
    {
        batimentToDelete = batiment;
        showDeleteConfirmation = true;
    }

    private async Task ConfirmDeleteBatiment()
    {
        if (batimentToDelete != null)
        {
            if (await ViewModel.DeleteBatimentAsync(batimentToDelete.BatimentId))
            {
                showDeleteConfirmation = false;
                await ViewModel.LoadDataAsync();
            }
        }
    }

    private async Task HandleBatimentSubmit()
    {
        try
        {
            bool success = false;
            if (isNewBatiment)
            {
                success = await ViewModel.AddBatimentAsync(currentBatiment);
            }
            else
            {
                success = await ViewModel.UpdateBatimentAsync(currentBatiment);
            }

            if (success)
            {
                await ViewModel.LoadDataAsync();
                showBatimentModal = false;
            }
        }
        catch (Exception ex)
        {
            ViewModel.ErrorMessage = "Une erreur est survenue : " + ex.Message;
        }
    }

    private void CloseBatimentModal()
    {
        showBatimentModal = false;
        currentBatiment = new();
        ViewModel.ErrorMessage = null;
        ViewModel.SuccessMessage = null;
    }
}