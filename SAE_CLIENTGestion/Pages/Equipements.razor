@page "/equipements"
@using SAE_CLIENTGestion.Models
@using SAE_CLIENTGestion.Models.DTO
@using SAE_CLIENTGestion.ViewModels
@inject IJSRuntime JS
@inject EquipementsViewModel ViewModel

<PageTitle>Gestion des Equipements</PageTitle>

<style>
    /* Styles existants */
    .sensor-row {
        background-color: transparent !important;
    }

    .custom-table .sensor-row:hover {
        background-color: rgba(var(--bs-primary-rgb), 0.03) !important;
    }

    .table > :not(caption) > * > * {
        background-color: transparent !important;
        box-shadow: none !important;
    }

    .btn-light:hover {
        background-color: var(--bs-light);
        transform: translateY(-1px);
        transition: all 0.2s ease;
    }

    .card {
        transition: all 0.3s ease;
    }

        .card:hover {
            box-shadow: 0 .5rem 1rem rgba(0,0,0,.1) !important;
        }

    /* Nouveaux styles pour la hiérarchie */
    .custom-table .building-row {
        background-color: rgba(0, 0, 0, 0.15) !important; /* Plus foncé pour le bâtiment */
    }

    .custom-table .room-row {
        background-color: rgba(0, 0, 0, 0.1) !important; /* Un peu plus foncé pour les salles */
    }

    .custom-table .wall-row {
        background-color: rgba(0, 0, 0, 0.05) !important; /* Légèrement plus foncé pour les murs */
    }

    .custom-table .sensor-row {
        background-color: white !important; /* Blanc pur pour les capteurs */
    }
</style>

<!-- type equipement -->
<div class="container-fluid p-4">
    <div class="card shadow border-0">
        <!-- Header avec gradient subtil -->
        <div class="card-header py-4 border-bottom border-light" style="background-color: #a1a1a1">
            <div class="d-flex justify-content-between align-items-center px-2">
                <div class="d-flex align-items-center gap-2">
                    <i class="bi bi-grid-3x3-gap fs-4 text-white"></i>
                    <h3 class="mb-0 fw-bold text-white">Types d'Equipements</h3>
                </div>
                <button class="btn btn-primary d-flex align-items-center gap-3 px-4 py-2 shadow-sm"
                        @onclick="() => { currentTypeEquipement = new(); showTypeEquipementModal = true; isNewTypeEquipement = true; }">
                    <i class="bi bi-plus-circle-fill fs-5"></i>
                    <span class="fw-medium">Nouveau Type d'équipement</span>
                </button>
            </div>
        </div>

      

        <div class=" p-4">
            @if (ViewModel.IsLoading)
            {
                <div class="d-flex flex-column justify-content-center align-items-center py-5">
                    <div class="spinner-border  mb-3" role="status">
                        <span class="visually-hidden">Chargement...</span>
                    </div>
                    <span class="text-muted">Chargement des types d'équipements...</span>
                </div>
            }
            else if (!ViewModel.TypeEquipements.Any())
            {
                <div class="alert alert-info border-0 shadow-sm d-flex align-items-center m-3 rounded-3">
                    <i class="bi bi-info-circle-fill me-3 fs-4"></i>
                    <div>
                        <h6 class="mb-0 fw-semibold">Aucun type d'équipements</h6>
                        <small class="text-muted">Commencez par créer votre premier type d'équipements</small>
                    </div>
                </div>
            }
            else
            {
                <div class="table-responsive">
                    <table class="table table-hover align-middle mb-0 custom-table">
                        <thead class="bg-light border-bottom">
                            <tr>
                                <th class="fw-semibold px-4 py-3 border-0">
                                    <div class="text-primary">Nom</div>
                                </th>
                                <th class="fw-semibold px-4 py-3 border-0">
                                    <div class="text-primary">Couleur</div>
                                </th>
                                <th class="text-end fw-semibold px-4 py-3 border-0">
                                    <div class="text-primary">Actions</div>
                                </th>
                            </tr>
                        </thead>
                        <tbody class="border-top-0">
                            @foreach (var typeEquipement in ViewModel.TypeEquipements)
                            {
                                <tr class="border-bottom">
                                    <td class="px-4 py-3">
                                        <div class="fw-semibold">@typeEquipement.Nom</div>
                                    </td>
                                    <td class="px-4 py-3">
                                        <span style="background-color: @(typeEquipement.Couleur ?? "#6c757d");
                padding: 0.35em 0.65em;
                font-size: 0.85em;
                font-weight: 600;
                border-radius: 0.25rem;
                color: white;
                display: inline-block;
                text-align: center;
                white-space: nowrap;
                vertical-align: baseline;">
                                            @typeEquipement.Couleur
                                        </span>
                                    </td>
                                    <td class="px-4 py-3 text-end">
                                        <div class="btn-group">
                                            <button class="btn btn-light btn-sm rounded-start-2 shadow-sm me-1"
                                                    @onclick="() => EditTypeEquipement(typeEquipement)"
                                                    data-bs-toggle="tooltip"
                                                    title="Modifier">
                                                <i class="bi bi-pencil-square text-black"></i>
                                            </button>
                                            <button class="btn btn-light btn-sm rounded-end-2 shadow-sm"
                                                    @onclick="() => DeleteTypeEquipement(typeEquipement)"
                                                    data-bs-toggle="tooltip"
                                                    title="Supprimer">
                                                <i class="bi bi-trash text-danger"></i>
                                            </button>
                                        </div>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            }
        </div>
    </div>
</div>

@if (showTypeEquipementModal)
{
    <div class="modal-backdrop fade show" style="opacity: 0.8; background-color: black; position: fixed; top: 0; left: 0; width: 100vw; height: 100vh; z-index: 1040;"></div>
    <div class="modal fade show" style="display: block; z-index: 1041;" tabindex="-1">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">@(isNewTypeEquipement ? "Nouveau Type d'équipement" : "Modifier le Type d'équipement")</h5>
                    <button type="button" class="btn-close" @onclick="() => CloseModal()"></button>
                </div>
                <div class="modal-body">
                    <EditForm Model="@currentTypeEquipement" OnValidSubmit="HandleTypeEquipementSubmit">
                        <DataAnnotationsValidator />
                        <ValidationSummary />

                        <div class="mb-3">
                            <label class="form-label">Nom</label>
                            <InputText class="form-control" @bind-Value="currentTypeEquipement.Nom" />
                            <ValidationMessage For="@(() => currentTypeEquipement.Nom)" />
                        </div>

                        <div class="mb-3">
                            <label class="form-label">Couleur</label>
                            <InputText type="color" class="form-control form-control-color" @bind-Value="currentTypeEquipement.Couleur" />
                            <ValidationMessage For="@(() => currentTypeEquipement.Couleur)" />
                        </div>

                        <div class="mt-4">
                            <button type="submit" class="btn btn-primary me-2">Enregistrer</button>
                            <button type="button" class="btn btn-secondary" @onclick="() => CloseModal()">Annuler</button>
                        </div>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>

}
@if (showDeleteTypeEquipementConfirmation)
{
    <div class="modal-backdrop fade show" style="opacity: 0.8; background-color: black; position: fixed; top: 0; left: 0; width: 100vw; height: 100vh; z-index: 1040;"></div>
    <div class="modal fade show" style="display: block; z-index: 1041;" tabindex="-1">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Confirmer la suppression</h5>
                    <button type="button" class="btn-close" @onclick="() => showDeleteTypeEquipementConfirmation = false"></button>
                </div>
                <div class="modal-body">
                    <p>Êtes-vous sûr de vouloir supprimer ce type de salle ?</p>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="() => showDeleteTypeEquipementConfirmation = false">Annuler</button>
                    <button type="button" class="btn btn-danger" @onclick="ConfirmDeleteTypeEquipement">Supprimer</button>
                </div>
            </div>
        </div>
    </div>
}

<div class="container-fluid main-content overflow-auto">
    @if (!string.IsNullOrEmpty(ViewModel.SuccessMessage))
    {
        <div class="alert alert-success alert-dismissible fade show custom-alert" role="alert">
            @ViewModel.SuccessMessage
            <button type="button" class="btn-close" @onclick="() => ViewModel.SuccessMessage = null"></button>
        </div>
    }

    @if (!string.IsNullOrEmpty(ViewModel.ErrorMessage))
    {
        <div class="alert alert-danger alert-dismissible fade show custom-alert" role="alert">
            @ViewModel.ErrorMessage
            <button type="button" class="btn-close" @onclick="() => ViewModel.ErrorMessage = null"></button>
        </div>
    }


    <!-- Section Equipements -->
    <div class="container-fluid p-4">
        <div class="card shadow border-0">
            <div class="card-header py-4 border-bottom border-light" style="background-color: #a1a1a1">
                <div class="d-flex justify-content-between align-items-center px-2">
                    <div class="d-flex align-items-center gap-2">
                        <i class="bi bi-cpu fs-4 text-white"></i>
                        <h3 class="mb-0 fw-bold text-white">Equipements</h3>
                    </div>
                    <button class="btn btn-primary d-flex align-items-center gap-3 px-4 py-2 shadow-sm"
                            @onclick="() => { currentEquipement = new(); showEquipementModal = true; isNewEquipement = true; }">
                        <i class="bi bi-plus-circle-fill fs-5"></i>
                        <span class="fw-medium">Nouveau Equipement</span>
                    </button>
                </div>
            </div>

            <!-- Section Filtres -->
            <div class="px-4 pt-3 pb-2 border-bottom">
                <div class="d-flex justify-content-between align-items-center">
                    <div class="row g-3 flex-grow-1">
                        <div class="col-md-4">
                            <label class="form-label">Filtrer par Bâtiment</label>
                            <select class="form-select" @bind="selectedBatimentFilter">
                                <option value="">Tous les bâtiments</option>
                                @foreach (var batiment in ViewModel.Batiments)
                                {
                                    <option value="@batiment.BatimentId">@batiment.Nom</option>
                                }
                            </select>
                        </div>
                        <div class="col-md-4">
                            <label class="form-label">Filtrer par Salle</label>
                            <select class="form-select" @bind="selectedSalleFilter" disabled="@(selectedBatimentFilter == null)">
                                <option value="">Toutes les salles</option>
                                @foreach (var salle in ViewModel.Salles.Where(s => selectedBatimentFilter == null || s.BatimentId == selectedBatimentFilter))
                                {
                                    <option value="@salle.SalleId">@salle.Nom</option>
                                }
                            </select>
                        </div>
                        <div class="col-md-4">
                            <label class="form-label">Filtrer par Mur</label>
                            <select class="form-select" @bind="selectedMurFilter" disabled="@(selectedSalleFilter == null)">
                                <option value="">Tous les murs</option>
                                @foreach (var mur in ViewModel.Salles
                                .Where(s => selectedSalleFilter == null || s.SalleId == selectedSalleFilter)
                                .SelectMany(s => s.Murs))
                                {
                                    <option value="@mur.MurId">Mur @mur.Nom (@mur.Orientation)</option>
                                }
                            </select>
                        </div>
                    </div>
                    <div class="ms-3 d-flex align-items-end" style="height: 71px;">
                        <button class="btn btn-outline-secondary" @onclick="ResetFilters"
                                disabled="@(!HasActiveFilters)">
                            <i class="bi bi-arrow-counterclockwise me-2"></i>
                            Réinitialiser
                        </button>
                    </div>
                </div>
            </div>

            <div class="p-4">
                @if (ViewModel.IsLoading)
                {
                    <div class="d-flex flex-column justify-content-center align-items-center py-5">
                        <div class="spinner-border mb-3" role="status">
                            <span class="visually-hidden">Chargement...</span>
                        </div>
                        <span class="text-muted">Chargement des équipements...</span>
                    </div>
                }
                else if (!ViewModel.Equipements.Any())
                {
                    <div class="alert alert-info border-0 shadow-sm d-flex align-items-center m-3 rounded-3">
                        <i class="bi bi-info-circle-fill me-3 fs-4"></i>
                        <div>
                            <h6 class="mb-0 fw-semibold">Aucun équipement</h6>
                            <small class="text-muted">Commencez par ajouter votre premier équipement</small>
                        </div>
                    </div>
                }
                else
                {
                    <div class="table-responsive">
                        <table class="table table-hover align-middle mb-0 custom-table">
                            <thead class="border-bottom building-row">
                                <tr>
                                    <th class="fw-semibold px-4 py-3 border-0">
                                        <div class="text-primary">Localisation / Nom</div>
                                    </th>
                                    <th class="fw-semibold px-4 py-3 border-0">
                                        <div class="text-primary">Type d'équipement</div>
                                    </th>
                                    <th class="fw-semibold px-4 py-3 border-0">
                                        <div class="text-primary">Dimensions</div>
                                    </th>
                                    <th class="fw-semibold px-4 py-3 border-0">
                                        <div class="text-primary">Positions</div>
                                    </th>
                                    <th class="text-end fw-semibold px-4 py-3 border-0">
                                        <div class="text-primary">Actions</div>
                                    </th>
                                </tr>
                            </thead>
                            <tbody class="border-top-0">
                                @foreach (var batiment in ViewModel.Batiments.Where(b =>
                               (selectedBatimentFilter == null || b.BatimentId == selectedBatimentFilter) &&
                               ViewModel.Salles.Where(s => s.BatimentId == b.BatimentId)
                               .SelectMany(s => ViewModel.Murs.Where(m => m.SalleId == s.SalleId))
                               .SelectMany(m => m.Equipements)
                               .Any()
                               ))
                                {
                                    <!-- Ligne Bâtiment -->
                                    <tr class="border-bottom building-row">
                                        <td colspan="6" class="px-4 py-2">
                                            <div class="fw-bold text-primary">
                                                <i class="bi bi-building me-2"></i>
                                                @batiment.Nom
                                            </div>
                                        </td>
                                    </tr>

                                    @foreach (var salle in ViewModel.Salles.Where(s =>
                                   s.BatimentId == batiment.BatimentId &&
                                   (selectedSalleFilter == null || s.SalleId == selectedSalleFilter) &&
                                   ViewModel.Murs.Where(m => m.SalleId == s.SalleId)
                                   .SelectMany(m => m.Equipements)
                                   .Any()
                                   ))
                                    {
                                        <!-- Ligne Salle -->
                                        <tr class="border-bottom room-row">
                                            <td colspan="6" class="px-4 py-2">
                                                <div class="fw-semibold text-secondary" style="margin-left: 1.5rem!important;">
                                                    <i class="bi bi-door-closed me-2"></i>
                                                    @salle.Nom
                                                </div>
                                            </td>
                                        </tr>

                                        @foreach (var mur in ViewModel.Murs.Where(m =>
                                       m.SalleId == salle.SalleId &&
                                       (selectedMurFilter == null || m.MurId == selectedMurFilter) &&
                                       m.Equipements.Any()
                                       ))
                                        {
                                            <!-- Ligne Mur -->
                                            <tr class="border-bottom wall-row">
                                                <td colspan="6" class="px-4 py-2">
                                                    <div class="fw-semibold text-muted" style="margin-left: 3rem!important;">
                                                        <i class="bi bi-bricks me-2"></i>
                                                        <span>@mur.MurId | @mur.Nom (@mur.Equipements.Count)</span>
                                                    </div>
                                                </td>
                                            </tr>

                                            @foreach (var equipement in mur.Equipements)
                                            {
                                                <tr class="border-bottom sensor-row">
                                                    <td class="px-4 py-3">
                                                        <div class="ms-6 fw-normal" style="margin-left: 4.5rem!important;">
                                                            <i class="bi bi-cpu me-2 text-muted"></i>
                                                            @equipement.Nom
                                                        </div>
                                                    </td>
                                                    <td class="px-4 py-3">
                                                        <span style="background-color: @(equipement.TypeEquipement?.Couleur ?? "#6c757d");
                                                             padding: 0.35em 0.65em;
                                                             font-size: 0.85em;
                                                             font-weight: 500;
                                                             border-radius: 0.25rem;
                                                             color: white;
                                                             display: inline-block;
                                                             text-align: center;
                                                             white-space: nowrap;
                                                             vertical-align: baseline;">
                                                            @(equipement.TypeEquipement?.Nom ?? "Aucun Type d'équipement")
                                                        </span>
                                                    </td>
                                                    <td class="px-4 py-3">
                                                        <small class="text-muted">
                                                            Longueur: @equipement.Longueur, Hauteur: @equipement.Hauteur
                                                        </small>
                                                    </td>
                                                    <td class="px-4 py-3">
                                                        <small class="text-muted">
                                                            X: @equipement.PositionX, Y: @equipement.PositionY
                                                        </small>
                                                    </td>
                           
                                                    <td class="px-4 py-3 text-end">
                                                        <div class="btn-group">
                                                            <button class="btn btn-light btn-sm rounded-start-2 shadow-sm me-1"
                                                                    @onclick="() => EditEquipement(equipement)">
                                                                <i class="bi bi-pencil-square text-black"></i>
                                                            </button>
                                                            <button class="btn btn-light btn-sm rounded-end-2 shadow-sm"
                                                                    @onclick="() => DeleteEquipement(equipement)">
                                                                <i class="bi bi-trash text-danger"></i>
                                                            </button>
                                                        </div>
                                                    </td>
                                                </tr>
                                            }
                                        }
                                    }
                                }
                                @if (!HasActiveFilters && ViewModel.Equipements.Where(c => c.MurId == null || c.MurId == 0).Count() > 0)
                                {
                                    <!-- Affichage des equipements non associés à un mur -->
                                    @if (ViewModel.Equipements.Where(c => c.MurId == null || c.MurId == 0).Count() > 0)
                                    {

                                        <tr class="border-top">
                                            <td colspan="6" class="px-4 py-2">
                                                <div class="fw-bold text-primary">
                                                    <i class="bi bi-cpu me-2"></i>
                                                    Équipements non associés à un mur
                                                </div>
                                            </td>
                                        </tr>
                                    }

                                    @foreach (var equipement in ViewModel.Equipements.Where(c => c.MurId == null || c.MurId == 0))
                                    {
                                        <tr class="border-bottom sensor-row">
                                            <td class="px-4 py-3">
                                                <div class="ms-6 fw-normal" style="margin-left: 4.5rem!important;">
                                                    <i class="bi bi-cpu me-2 text-muted"></i>
                                                    @equipement.Nom
                                                </div>
                                            </td>
                                            <td class="px-4 py-3">
                                                <small class="text-muted">
                                                    Longueur: @equipement.Longueur, Hauteur: @equipement.Hauteur
                                                </small>
                                            </td>
                                            <td class="px-4 py-3">
                                                <small class="text-muted">
                                                    X: @equipement.PositionX, Y: @equipement.PositionY
                                                </small>
                                            </td>
                                            <td class="px-4 py-3 text-end">
                                                <div class="btn-group">
                                                    <button class="btn btn-light btn-sm rounded-start-2 shadow-sm me-1"
                                                            @onclick="() => EditEquipement(equipement)">
                                                        <i class="bi bi-pencil-square text-black"></i>
                                                    </button>
                                                    <button class="btn btn-light btn-sm rounded-end-2 shadow-sm"
                                                            @onclick="() => DeleteEquipement(equipement)">
                                                        <i class="bi bi-trash text-danger"></i>
                                                    </button>
                                                </div>
                                            </td>
                                        </tr>
                                    }
                                }

                            </tbody>

                        </table>
                    </div>
                }
            </div>
        </div>
    </div>

    @if (showEquipementModal)
    {
        <div class="modal-backdrop fade show"></div>
        <div class="modal fade show" style="display: block;" tabindex="-1">
            <div class="modal-dialog modal-dialog-centered modal-xl">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">@(isNewEquipement ? "Nouvel Equipement" : "Modifier l'équipement")</h5>
                        <button type="button" class="btn-close" @onclick="CloseEquipementModal"></button>
                    </div>
                    <div class="modal-body">
                        <EditForm Model="@currentEquipement" OnValidSubmit="HandleEquipementSubmit">
                            <DataAnnotationsValidator />
                            <ValidationSummary />

                            <div class="row">
                                <!-- Colonne du formulaire -->
                                <div class="col-md-6">
                                    <div class="mb-3">
                                        <label class="form-label">Nom</label>
                                        <InputText class="form-control" @bind-Value="currentEquipement.Nom" placeholder="Nom de l'équipement" />
                                    </div>

                                    <div class="mb-3">
                                        <label class="form-label">Type d'équipement</label>
                                        <InputSelect class="form-control" @bind-Value="currentEquipement.TypeEquipementId">
                                            <option value="0">Sélectionner un type d'équipement</option>
                                            @foreach (var typeEquipement in ViewModel.TypeEquipements)
                                            {
                                                <option value="@typeEquipement.TypeEquipementId">
                                                    <span style="background-color: @typeEquipement.Couleur;
                           padding: 0.2em 0.4em;
                           border-radius: 0.25rem;
                           color: white;">
                                                        @typeEquipement.Nom
                                                    </span>
                                                </option>
                                            }
                                        </InputSelect>
                                    </div>

                                    <div class="mb-3">
                                        <label class="form-label">Salle</label>
                                        <InputSelect class="form-control" @bind-Value="currentEquipement.SalleId">
                                            <option value="0">Sélectionner une salle</option>
                                            @foreach (var salle in ViewModel.Salles)
                                            {
                                                <option value="@salle.SalleId">@salle.Nom</option>
                                            }
                                        </InputSelect>
                                    </div>

                                    <div class="mb-3">
                                        <label class="form-label">Mur</label>
                                        <InputSelect class="form-control form-control-sm"
                                                     disabled="@(currentEquipement.SalleId == 0 || currentEquipement.SalleId == null)"
                                                     @bind-Value="currentEquipement.MurId"
                                                     @bind-Value:after="MurIdChanged">
                                            <option value="0">Sélectionner un mur</option>
                                            @if (currentEquipement.SalleId != 0)
                                            {
                                                @foreach (var mur in ViewModel.Salles.FirstOrDefault(s => s.SalleId == currentEquipement.SalleId)?.Murs ?? Enumerable.Empty<Mur>())
                                                {
                                                    <option value="@mur.MurId">Mur @mur.Nom (Orientation: @mur.Orientation)</option>
                                                }
                                            }
                                        </InputSelect>
                                    </div>


                                    <div class="row">
                                        <div class="col-md-6">
                                            <div class="mb-3">
                                                <label class="form-label">Position X</label>
                                                <InputNumber class="form-control" @bind-Value="currentEquipement.PositionX" />
                                            </div>
                                        </div>
                                        <div class="col-md-6">
                                            <div class="mb-3">
                                                <label class="form-label">Position Y</label>
                                                <InputNumber class="form-control" @bind-Value="currentEquipement.PositionY" />
                                            </div>
                                        </div>
                                    </div>

                                    <div class="row">
                                        <div class="col-md-6">
                                            <div class="mb-3">
                                                <label class="form-label">Longueur (cm)</label>
                                                <InputNumber class="form-control" @bind-Value="currentEquipement.Longueur" />
                                            </div>
                                        </div>
                                        <div class="col-md-6">
                                            <div class="mb-3">
                                                <label class="form-label">Hauteur (cm)</label>
                                                <InputNumber class="form-control" @bind-Value="currentEquipement.Hauteur" />
                                            </div>
                                        </div>
                                    </div>
                                </div>

                                <!-- Colonne de la visualisation -->
                                <div class="col-md-6">
                                    <div class="d-flex flex-column">
                                        <div class="mb-3">
                                            <label class="form-label">Aperçu du positionnement</label>
                                            <ul class="list-unstyled mt-2">
                                                <li>Position équipement: (@currentEquipement.PositionX, @currentEquipement.PositionY) cm</li>
                                                <li>Dimensions équipement: @currentEquipement.Longueur x @currentEquipement.Hauteur cm</li>
                                                <li>Dimensions mur: @selectedMur?.Longueur x @(selectedMur?.Hauteur) cm</li>
                                            </ul>
                                            <ul class="list-unstyled mt-2">
                                                <li class="mb-1">
                                                    <span class="d-inline-block me-2" style="width: 20px; height: 20px; background-color: #808080; opacity: 0.5; border: 2px solid #505050"></span>
                                                    Capteurs
                                                </li>
                                                <li class="mb-1">
                                                    <span class="d-inline-block me-2" style="width: 20px; height: 20px; background-color: #FFFF00; opacity: 0.5; border: 2px solid #FFA500"></span>
                                                    Autres équipements
                                                </li>
                                                <li>
                                                    <span class="d-inline-block me-2" style="width: 20px; height: 20px; background-color: #007bff; opacity: 0.5; border: 2px solid #0056b3"></span>
                                                    Équipement actuel
                                                </li>
                                            </ul>
                                            <div class="border rounded p-3">
                                                @if (currentEquipement.MurId == 0 || currentEquipement.MurId == null || selectedMur == null)
                                                {
                                                    <div class="d-flex justify-content-center align-items-center" style="height: 400px">
                                                        <div class="text-muted">
                                                            <i class="bi bi-arrows-move me-2"></i>
                                                            Sélectionnez un mur pour visualiser
                                                        </div>
                                                    </div>
                                                }
                                                else
                                                {
                                                    @* Calcul de l'échelle *@
                                                    @* Définition de l'échelle en fonction de la longueur du mur (ajustez selon vos besoins) *@
                                                    @* Si le mur est plus long que 400 cm, on réduit l'échelle pour qu'il tienne dans la vue. *@

                                                    double scaleFactor = 1.0;
                                                    double maxWidth = 400; // Largeur du SVG
                                                    double wallLength = selectedMur.Longueur;
                                                    if (wallLength > maxWidth)
                                                    {
                                                        scaleFactor = maxWidth / wallLength;
                                                    }
                                                    double scaledWidth = wallLength * scaleFactor;
                                                    double scaledHeight = selectedMur.Hauteur * scaleFactor;
                                                    double margin = 20; // marge pour la position de départ
                                                    double svgWidth = scaledWidth + margin * 2; // Ajouter la marge de chaque côté
                                                    double svgHeight = scaledHeight + margin * 2; // Ajouter la marge en haut et en bas

                                                    <svg width="100%" height="400" viewBox="0 0 @(Math.Round(svgWidth)) @(Math.Round(svgHeight))">
                                                        <!-- Grille -->
                                                        <defs>
                                                            <pattern id="grid" width="40" height="40" patternUnits="userSpaceOnUse">
                                                                <path d="M 40 0 L 0 0 0 40" fill="none" stroke="gray" stroke-width="0.5" stroke-opacity="0.3" />
                                                            </pattern>
                                                        </defs>
                                                        <rect width="100%" height="100%" fill="url(#grid)" style="stroke: #ccc; stroke-width: 1" />

                                                        <!-- Rectangle délimitant le mur -->
                                                        <rect x="@margin"
                                                              y="@margin"
                                                              width="@(Math.Round(scaledWidth))"
                                                              height="@(Math.Round(scaledHeight))"
                                                              fill="none"
                                                              stroke="#000000"
                                                              stroke-width="3" />

                                                        @if (selectedMur.Equipements != null)
                                                        {
                                                            @foreach (var capteur in selectedMur.Capteurs)
                                                            {
                                                                
                                                                    <rect x="@(Math.Round(margin + capteur.PositionX * scaleFactor))"
                                                                          y="@(Math.Round(margin + capteur.PositionY * scaleFactor))"
                                                                          width="@(Math.Round(capteur.Longueur * scaleFactor))"
                                                                          height="@(Math.Round(capteur.Hauteur * scaleFactor))"
                                                                          fill = "#808080"
                                                                          fill-opacity = "0.5"
                                                                          stroke = "#505050"
                                                                          stroke-width="2" />
                                                                   
                                                            }
                                                        }

                                                        @if (selectedMur.Equipements != null)
                                                        {
                                                            <!-- Affichage des équipements du mur -->
                                                            @foreach (var equipement in selectedMur.Equipements)
                                                            {
                                                                @if (equipement.EquipementId != currentEquipement.EquipementId)
                                                                {
                                                                <rect x="@(Math.Round(margin + equipement.PositionX * scaleFactor))"
                                                                      y="@(Math.Round(margin + equipement.PositionY * scaleFactor))"
                                                                      width="@(Math.Round(equipement.Longueur * scaleFactor))"
                                                                      height="@(Math.Round(equipement.Hauteur * scaleFactor))"
                                                                      fill="#FFFF00"
                                                                      fill-opacity="0.5"
                                                                      stroke="#FFA500"
                                                                      stroke-width="2" />
                                                                }
                                                            }
                                                        }

                                                        <!-- Equipement -->
                                                        <rect x="@(Math.Round(margin + currentEquipement.PositionX * scaleFactor))"
                                                              y="@(Math.Round(margin + currentEquipement.PositionY * scaleFactor))"
                                                              width="@(Math.Round(currentEquipement.Longueur * scaleFactor))"
                                                              height="@(Math.Round(currentEquipement.Hauteur * scaleFactor))"
                                                              fill="#007bff"
                                                              fill-opacity="0.5"
                                                              stroke="#0056b3"
                                                              stroke-width="2" />

                                                        <!-- Point d'origine du capteur -->
                                                        <circle cx="@(Math.Round(margin + currentEquipement.PositionX * scaleFactor))"
                                                                cy="@(Math.Round(margin + currentEquipement.PositionY * scaleFactor))"
                                                                r="2"
                                                                fill="red" />
                                                    </svg>
                                                }
                                            </div>
                                        </div>
                                    </div>
                                </div>

                            </div>

                            <div class="mt-4 d-flex align-items-center gap-3">
                                <div>
                                    <button type="submit" class="btn btn-primary" disabled="@isProcessing">
                                        @if (isProcessing)
                                        {
                                            <span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
                                        }
                                        @progressStatus
                                    </button>
                                </div>
                                <div>
                                    <button type="button" class="btn btn-secondary" @onclick="CloseEquipementModal">Annuler</button>
                                </div>
                                @if (!string.IsNullOrEmpty(validationMessage))
                                {
                                    <div class="alert alert-danger mb-0 w-100 d-flex align-items-center" role="alert">
                                        @validationMessage
                                    </div>
                                }
                            </div>
                        </EditForm>
                    </div>
                </div>
            </div>
        </div>
    }

    <!-- Modal de confirmation pour la suppression -->
    @if (showDeleteConfirmation)
    {
        <div class="modal-backdrop fade show"></div>
        <div class="modal fade show" style="display: block;" tabindex="-1">
            <div class="modal-dialog modal-dialog-centered">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">Confirmer la suppression</h5>
                        <button type="button" class="btn-close" @onclick="() => showDeleteConfirmation = false"></button>
                    </div>
                    <div class="modal-body">
                        <p>Êtes-vous sûr de vouloir supprimer cet équipement ?</p>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" @onclick="() => showDeleteConfirmation = false">Annuler</button>
                        <button type="button" class="btn btn-danger" @onclick="ConfirmDelete">Supprimer</button>
                    </div>
                </div>
            </div>
        </div>
    }
</div>

@code {
    private bool showEquipementModal = false;
    private bool showDeleteConfirmation = false;
    private bool isNewEquipement = true;
    private Equipement currentEquipement = new();
    private Equipement equipementToDelete;
    private TypeEquipementDTO currentTypeEquipement = new();
    private TypeEquipementDTO typeEquipementToDelete;
    private Mur selectedMur = new();
    private bool isProcessing = false;
    private string progressStatus => isNewEquipement ?
        (isProcessing ? "Création en cours..." : "Créer") :
        (isProcessing ? "Modification en cours..." : "Modifier");
    private string validationMessage = "";
    private bool showTypeEquipementModal = false;
    private bool isNewTypeEquipement = false;
    private bool showDeleteTypeEquipementConfirmation = false;

    // Gestionnaire pour le changement de bâtiment
    private int? _selectedBatimentFilter;
    private int? selectedBatimentFilter
    {
        get => _selectedBatimentFilter;
        set
        {
            _selectedBatimentFilter = value;
            // Réinitialiser les filtres dépendants
            selectedSalleFilter = null;
            selectedMurFilter = null;
            StateHasChanged();
        }
    }

    // Gestionnaire pour le changement de salle
    private int? _selectedSalleFilter;
    private int? selectedSalleFilter
    {
        get => _selectedSalleFilter;
        set
        {
            _selectedSalleFilter = value;
            // Réinitialiser le filtre de mur
            selectedMurFilter = null;
            StateHasChanged();
        }
    }

    private int? selectedMurFilter;

    // Propriété pour vérifier si des filtres sont actifs
    private bool HasActiveFilters => selectedBatimentFilter.HasValue || selectedSalleFilter.HasValue || selectedMurFilter.HasValue;

    // Méthode pour réinitialiser tous les filtres
    private void ResetFilters()
    {
        selectedBatimentFilter = null;
        selectedSalleFilter = null;
        selectedMurFilter = null;
    }

    protected override async Task OnInitializedAsync()
    {
        await ViewModel.LoadDataAsync();
    }

    private void EditEquipement(Equipement equipement)
    {
        currentEquipement = new Equipement
            {
                EquipementId = equipement.EquipementId,
                Nom = equipement.Nom,
                Longueur = equipement.Longueur,
                Hauteur = equipement.Hauteur,
                PositionX = equipement.PositionX,
                PositionY = equipement.PositionY,
                TypeEquipementId = equipement.TypeEquipementId,
                SalleId = equipement.SalleId,
                MurId = equipement.MurId
            };
        isNewEquipement = false;
        showEquipementModal = true;
        selectedMur = ViewModel.Salles
    .FirstOrDefault(s => s.SalleId == currentEquipement.SalleId)?
    .Murs.FirstOrDefault(m => m.MurId == currentEquipement.MurId);
    }


    private void EditTypeEquipement(TypeEquipementDTO typeEquipement)
    {
        currentTypeEquipement = new TypeEquipementDTO
            {
                TypeEquipementId = typeEquipement.TypeEquipementId,
                Nom = typeEquipement.Nom,
                Couleur = typeEquipement.Couleur,
            };
        isNewTypeEquipement = false;
        showTypeEquipementModal = true;
    }

    private async Task HandleTypeEquipementSubmit()
    {
        bool success;
        if (isNewTypeEquipement)
        {
            success = await ViewModel.AddTypeEquipementAsync(currentTypeEquipement);
        }
        else
        {
            success = await ViewModel.UpdateTypeEquipementAsync(currentTypeEquipement);
            await ViewModel.LoadDataAsync();
        }
        if (success)
        {
            showTypeEquipementModal = false;
        }
    }

    private void DeleteTypeEquipement(TypeEquipementDTO typeEquipement)
    {
        typeEquipementToDelete = typeEquipement;
        showDeleteTypeEquipementConfirmation = true;
    }

    private async Task ConfirmDeleteTypeEquipement()
    {
        if (typeEquipementToDelete != null)
        {
            if (await ViewModel.DeleteTypeEquipementAsync(typeEquipementToDelete.TypeEquipementId))
            {
                showDeleteTypeEquipementConfirmation = false;
            }
        }
    }

    private bool ValidateForm()
    {
        validationMessage = null;

        // Vérification du nom
        if (string.IsNullOrWhiteSpace(currentEquipement?.Nom))
        {
            validationMessage = "Le nom de l'équipement est requis.";
            return false;
        }

        // Vérification des positions
        if (currentEquipement?.PositionX < 0)
        {
            validationMessage = "La position X doit être positive.";
            return false;
        }
        if (currentEquipement?.PositionY < 0)
        {
            validationMessage = "La position Y doit être positive.";
            return false;
        }

        // Vérification des dimensions
        if (currentEquipement?.Longueur <= 0 || currentEquipement?.Longueur == null)
        {
            validationMessage = "La longueur doit être supérieure à 0.";
            return false;
        }
        if (currentEquipement?.Hauteur <= 0 || currentEquipement?.Hauteur == null)
        {
            validationMessage = "La hauteur doit être supérieure à 0.";
            return false;
        }

        // Vérification des dimensions du capteur par rapport au mur
        var mur = ViewModel?.Salles
            .FirstOrDefault(s => s.SalleId == currentEquipement.SalleId)?
            .Murs.FirstOrDefault(m => m.MurId == currentEquipement.MurId);

        if (mur != null)
        {
            if (currentEquipement.Longueur > mur.Longueur)
            {
                validationMessage = "La longueur de l'équipement ne peut pas dépasser celle du mur.";
                return false;
            }
            if (currentEquipement.Hauteur > mur.Hauteur)
            {
                validationMessage = "La hauteur de l'équipement  ne peut pas dépasser celle du mur.";
                return false;
            }
            if (currentEquipement.PositionX > mur.Longueur)
            {
                validationMessage = "La position X ne peut pas dépasser la longueur du mur.";
                return false;
            }
            if (currentEquipement.PositionY > mur.Hauteur)
            {
                validationMessage = "La position Y ne peut pas dépasser la hauteur du mur.";
                return false;
            }
        }

        return true;
    }


    private Task MurIdChanged()
    {
        // Rechercher le mur sélectionné
        selectedMur = ViewModel.Salles
            .FirstOrDefault(s => s.SalleId == currentEquipement.SalleId)?
            .Murs.FirstOrDefault(m => m.MurId == currentEquipement.MurId);
        return Task.CompletedTask;
    }

    private void DeleteEquipement(Equipement equipement)
    {
        equipementToDelete = equipement;
        showDeleteConfirmation = true;
    }

    private async Task ConfirmDelete()
    {
        try
        {
            await ViewModel.DeleteEquipementAsync(equipementToDelete.EquipementId);
            showDeleteConfirmation = false;
            await ViewModel.LoadDataAsync();
        }
        catch (Exception ex)
        {
            ViewModel.ErrorMessage = "Une erreur est survenue lors de la suppression : " + ex.Message;
        }
    }


    private async Task HandleEquipementSubmit()
    {
        try
        {
            isProcessing = true;
            validationMessage = "";

            // Validation des champs avant l'enregistrement
            if (!ValidateForm())
            {
                return;
            }

            // Création du DTO avec les valeurs actuelles
            EquipementDTO equipementDto = new EquipementDTO()
                {
                    EquipementId = currentEquipement.EquipementId,
                    Nom = currentEquipement.Nom,
                    SalleId = currentEquipement.SalleId,
                    MurId = currentEquipement.MurId,
                    PositionX = currentEquipement.PositionX,
                    PositionY = currentEquipement.PositionY,
                    Longueur = currentEquipement.Longueur,
                    TypeEquipementId = currentEquipement.TypeEquipementId,
                    Hauteur = currentEquipement.Hauteur
                };

            // Ajout ou mise à jour selon le cas
            if (isNewEquipement)
            {
                await ViewModel.AddEquipementAsync(equipementDto);
            }
            else
            {
                await ViewModel.UpdateEquipementAsync(equipementDto);
            }

            // Rafraîchissement des données et fermeture de la modale
            await ViewModel.LoadDataAsync();
            showEquipementModal = false;
        }
        catch (Exception ex)
        {
            validationMessage = "Une erreur est survenue : " + ex.Message;
        }
        finally
        {
            isProcessing = false;
        }
    }



    private void CloseEquipementModal()
    {
        showEquipementModal = false;
        currentEquipement = new();
    }

    private void CloseModal(string modalType = "all")
    {
        switch (modalType.ToLower())
        {
            case "typeequipement":
                showTypeEquipementModal = false;
                currentTypeEquipement = new();
                break;


            case "all":
            default:
                // Ferme toutes les modales et réinitialise tous les états
                showTypeEquipementModal = false;

                currentTypeEquipement = new();
                break;
        }
    }
}