@page "/equipements"
@using SAE_CLIENTGestion.Models
@using SAE_CLIENTGestion.Models.DTO
@using SAE_CLIENTGestion.ViewModels
@inject IJSRuntime JS
@inject EquimementsViewModel ViewModel

<PageTitle>Gestion des Equipements</PageTitle>

<style>
    /* Styles existants */
    .sensor-row {
        background-color: transparent !important;
    }

    .custom-table .sensor-row:hover {
        background-color: rgba(var(--bs-primary-rgb), 0.03) !important;
    }

    .table > :not(caption) > * > * {
        background-color: transparent !important;
        box-shadow: none !important;
    }

    .btn-light:hover {
        background-color: var(--bs-light);
        transform: translateY(-1px);
        transition: all 0.2s ease;
    }

    .card {
        transition: all 0.3s ease;
    }

        .card:hover {
            box-shadow: 0 .5rem 1rem rgba(0,0,0,.1) !important;
        }

    /* Nouveaux styles pour la hiérarchie */
    .custom-table .building-row {
        background-color: rgba(0, 0, 0, 0.15) !important; /* Plus foncé pour le bâtiment */
    }

    .custom-table .room-row {
        background-color: rgba(0, 0, 0, 0.1) !important; /* Un peu plus foncé pour les salles */
    }

    .custom-table .wall-row {
        background-color: rgba(0, 0, 0, 0.05) !important; /* Légèrement plus foncé pour les murs */
    }

    .custom-table .sensor-row {
        background-color: white !important; /* Blanc pur pour les capteurs */
    }
</style>

<div class="container-fluid main-content overflow-auto">
    @if (!string.IsNullOrEmpty(ViewModel.SuccessMessage))
    {
        <div class="alert alert-success alert-dismissible fade show custom-alert" role="alert">
            @ViewModel.SuccessMessage
            <button type="button" class="btn-close" @onclick="() => ViewModel.SuccessMessage = null"></button>
        </div>
    }

    @if (!string.IsNullOrEmpty(ViewModel.ErrorMessage))
    {
        <div class="alert alert-danger alert-dismissible fade show custom-alert" role="alert">
            @ViewModel.ErrorMessage
            <button type="button" class="btn-close" @onclick="() => ViewModel.ErrorMessage = null"></button>
        </div>
    }

    <!-- Section Capteurs -->
    <div class="container-fluid p-4">
        <div class="card shadow border-0 rounded-3">
            <div class="card-header py-4 border-bottom border-light" style="background-color: #a1a1a1">
                <div class="d-flex justify-content-between align-items-center px-2">
                    <div class="d-flex align-items-center gap-2">
                        <i class="bi bi-cpu fs-4 text-white"></i>
                        <h3 class="mb-0 fw-bold text-white">Capteurs</h3>
                    </div>
                    <button class="btn btn-primary d-flex align-items-center gap-3 rounded-pill px-4 py-2 shadow-sm"
                            @onclick="() => { currentCapteur = new(); showCapteurModal = true; isNewCapteur = true; }">
                        <i class="bi bi-plus-circle-fill fs-5"></i>
                        <span class="fw-medium">Nouveau Capteur</span>
                    </button>
                </div>
            </div>

            <div class="p-4">
                @if (ViewModel.IsLoading)
                {
                    <div class="d-flex flex-column justify-content-center align-items-center py-5">
                        <div class="spinner-border mb-3" role="status">
                            <span class="visually-hidden">Chargement...</span>
                        </div>
                        <span class="text-muted">Chargement des capteurs...</span>
                    </div>
                }
                else if (!ViewModel.Capteurs.Any())
                {
                    <div class="alert alert-info border-0 shadow-sm d-flex align-items-center m-3 rounded-3">
                        <i class="bi bi-info-circle-fill me-3 fs-4"></i>
                        <div>
                            <h6 class="mb-0 fw-semibold">Aucun capteur</h6>
                            <small class="text-muted">Commencez par ajouter votre premier capteur</small>
                        </div>
                    </div>
                }
                else
                {
                    <div class="table-responsive">
                        <table class="table table-hover align-middle mb-0 custom-table">
                            <thead class="border-bottom building-row">
                                <tr>
                                    <th class="fw-semibold px-4 py-3 border-0">
                                        <div class="text-primary">Localisation / Nom</div>
                                    </th>

                                    <th class="fw-semibold px-4 py-3 border-0">
                                        <div class="text-primary">État</div>
                                    </th>
                                    <th class="fw-semibold px-4 py-3 border-0">
                                        <div class="text-primary">Dimensions</div>
                                    </th>
                                    <th class="fw-semibold px-4 py-3 border-0">
                                        <div class="text-primary">Positions</div>
                                    </th>
                                    <th class="fw-semibold px-4 py-3 border-0">
                                        <div class="text-primary">Distance Fenetre / Chauffage / Porte</div>
                                    </th>
                                    <th class="text-end fw-semibold px-4 py-3 border-0">
                                        <div class="text-primary">Actions</div>
                                    </th>
                                </tr>
                            </thead>
                            <tbody class="border-top-0">
                                @foreach (var batiment in ViewModel.Batiments.Where(b =>
                               ViewModel.Salles.Where(s => s.BatimentId == b.BatimentId) // Pour chaque salle du bâtiment
                               .SelectMany(s => ViewModel.Murs.Where(m => m.SalleId == s.SalleId)) // Pour chaque mur de ces salles
                               .SelectMany(m => m.Capteurs) // Pour tous les capteurs de ces murs
                               .Any() // Vérifie s'il y a au moins un capteur
                               ))
                                {
                                    <!-- Ligne Bâtiment -->
                                    <tr class="border-bottom building-row">
                                        <td colspan="6" class="px-4 py-2">
                                            <div class="fw-bold text-primary">
                                                <i class="bi bi-building me-2"></i>
                                                @batiment.Nom
                                            </div>
                                        </td>
                                    </tr>

                                    @foreach (var salle in ViewModel.Salles.Where(s =>
                                   s.BatimentId == batiment.BatimentId &&
                                   ViewModel.Murs.Where(m => m.SalleId == s.SalleId) // Pour chaque mur de la salle
                                   .SelectMany(m => m.Capteurs) // Pour tous les capteurs de ces murs
                                   .Any() // Vérifie s'il y a au moins un capteur
                                   ))
                                    {
                                        <!-- Ligne Salle -->
                                        <tr class="border-bottom room-row">
                                            <td colspan="6" class="px-4 py-2">
                                                <div class="fw-semibold text-secondary" style="margin-left: 1.5rem!important;">
                                                    <i class="bi bi-door-closed me-2"></i>
                                                    @salle.Nom
                                                </div>
                                            </td>
                                        </tr>

                                        @foreach (var mur in ViewModel.Murs.Where(m =>
                                       m.SalleId == salle.SalleId &&
                                       m.Capteurs.Any() // Vérifie si le mur a au moins un capteur
                                       ))
                                        {
                                            <!-- Ligne Mur -->
                                            <tr class="border-bottom wall-row">
                                                <td colspan="6" class="px-4 py-2">
                                                    <div class="fw-semibold text-muted" style="margin-left: 3rem!important;">
                                                        <i class="bi bi-bricks me-2"></i>
                                                        <span>@mur.MurId | @mur.Nom (@mur.Capteurs.Count)</span>
                                                    </div>
                                                </td>
                                            </tr>

                                            @foreach (var capteur in mur.Capteurs)
                                            {
                                                <tr class="border-bottom sensor-row">
                                                    <td class="px-4 py-3">
                                                        <div class="ms-6 fw-normal" style="margin-left: 4.5rem!important;">
                                                            <i class="bi bi-cpu me-2 text-muted"></i>
                                                            @capteur.Nom
                                                        </div>
                                                    </td>
                                                    <td class="px-4 py-3">
                                                        <span class="badge @(capteur.EstActif ? "bg-success" : "bg-danger")">
                                                            @(capteur.EstActif ? "Actif" : "Inactif")
                                                        </span>
                                                    </td>
                                                    <td class="px-4 py-3">
                                                        <small class="text-muted">
                                                            Longueur: @capteur.Longueur, Hauteur: @capteur.Hauteur
                                                        </small>
                                                    </td>
                                                    <td class="px-4 py-3">
                                                        <small class="text-muted">
                                                            X: @capteur.PositionX, Y: @capteur.PositionY
                                                        </small>
                                                    </td>
                                                    <td class="px-4 py-3">
                                                        <small class="text-muted">
                                                            Distance : [Fenetre: @(capteur.DistanceFenetre)cm], [Chauffage: @(capteur.DistanceChauffage)cm], [Porte: @(capteur.DistancePorte)cm]
                                                        </small>
                                                    </td>
                                                    <td class="px-4 py-3 text-end">
                                                        <div class="btn-group">
                                                            <button class="btn btn-light btn-sm rounded-start-2 shadow-sm me-1"
                                                                    @onclick="() => EditCapteur(capteur)">
                                                                <i class="bi bi-pencil-square text-black"></i>
                                                            </button>
                                                            <button class="btn btn-light btn-sm rounded-end-2 shadow-sm"
                                                                    @onclick="() => DeleteCapteur(capteur)">
                                                                <i class="bi bi-trash text-danger"></i>
                                                            </button>
                                                        </div>
                                                    </td>
                                                </tr>
                                            }
                                        }
                                    }
                                }

                                <!-- Affichage des capteurs non associés à un mur -->
                                @if (ViewModel.Capteurs.Where(c => c.MurId == null || c.MurId == 0).Count() > 0)
                                {
                                    
                                <tr class="border-top">
                                        <td colspan="6" class="px-4 py-2">
                                            <div class="fw-bold text-primary">
                                                <i class="bi bi-cpu me-2"></i>
                                                Capteurs non associés à un mur
                                            </div>
                                        </td>
                                    </tr>
                                }

                                @foreach (var capteur in ViewModel.Capteurs.Where(c => c.MurId == null || c.MurId == 0))
                                {
                                    <tr class="border-bottom sensor-row">
                                        <td class="px-4 py-3">
                                            <div class="ms-6 fw-normal" style="margin-left: 4.5rem!important;">
                                                <i class="bi bi-cpu me-2 text-muted"></i>
                                                @capteur.Nom
                                            </div>
                                        </td>
                                        <td class="px-4 py-3">
                                            <span class="badge @(capteur.EstActif ? "bg-success" : "bg-danger")">
                                                @(capteur.EstActif ? "Actif" : "Inactif")
                                            </span>
                                        </td>
                                        <td class="px-4 py-3">
                                            <small class="text-muted">
                                                Longueur: @capteur.Longueur, Hauteur: @capteur.Hauteur
                                            </small>
                                        </td>
                                        <td class="px-4 py-3">
                                            <small class="text-muted">
                                                X: @capteur.PositionX, Y: @capteur.PositionY
                                            </small>
                                        </td>
                                        <td class="px-4 py-3">
                                            <small class="text-muted">
                                                Distance : [Fenetre: @(capteur.DistanceFenetre)cm], [Chauffage: @(capteur.DistanceChauffage)cm], [Porte: @(capteur.DistancePorte)cm]
                                            </small>
                                        </td>
                                        <td class="px-4 py-3 text-end">
                                            <div class="btn-group">
                                                <button class="btn btn-light btn-sm rounded-start-2 shadow-sm me-1"
                                                        @onclick="() => EditCapteur(capteur)">
                                                    <i class="bi bi-pencil-square text-black"></i>
                                                </button>
                                                <button class="btn btn-light btn-sm rounded-end-2 shadow-sm"
                                                        @onclick="() => DeleteCapteur(capteur)">
                                                    <i class="bi bi-trash text-danger"></i>
                                                </button>
                                            </div>
                                        </td>
                                    </tr>
                                }
                            </tbody>

                        </table>
                    </div>
                }
            </div>
        </div>
    </div>

    @if (showCapteurModal)
    {
        <div class="modal-backdrop fade show"></div>
        <div class="modal fade show" style="display: block;" tabindex="-1">
            <div class="modal-dialog modal-dialog-centered modal-xl">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">@(isNewCapteur ? "Nouveau Capteur" : "Modifier le Capteur")</h5>
                        <button type="button" class="btn-close" @onclick="CloseCapteurModal"></button>
                    </div>
                    <div class="modal-body">
                        <EditForm Model="@currentCapteur" OnValidSubmit="HandleCapteurSubmit">
                            <DataAnnotationsValidator />
                            <ValidationSummary />

                            <div class="row">
                                <!-- Colonne du formulaire -->
                                <div class="col-md-6">
                                    <div class="mb-3">
                                        <label class="form-label">Nom</label>
                                        <InputText class="form-control" @bind-Value="currentCapteur.Nom" placeholder="Nom du capteur" />
                                    </div>

                                    <div class="mb-3">
                                        <label class="form-label">Salle</label>
                                        <InputSelect class="form-control" @bind-Value="currentCapteur.SalleId" >
                                            <option value="0">Sélectionner une salle</option>
                                            @foreach (var salle in ViewModel.Salles)
                                            {
                                                <option value="@salle.SalleId">@salle.Nom</option>
                                            }
                                        </InputSelect>
                                    </div>

                                    <div class="mb-3">
                                        <label class="form-label">Mur</label>
                                        <InputSelect class="form-control form-control-sm"
                                                     disabled="@(currentCapteur.SalleId == 0 || currentCapteur.SalleId == null)"
                                                     @bind-Value="currentCapteur.MurId"
                                                     @bind-Value:after="MurIdChanged">
                                            <option value="0">Sélectionner un mur</option>
                                            @if (currentCapteur.SalleId != 0)
                                            {
                                                @foreach (var mur in ViewModel.Salles.FirstOrDefault(s => s.SalleId == currentCapteur.SalleId)?.Murs ?? Enumerable.Empty<Mur>())
                                                {
                                                    <option value="@mur.MurId">Mur @mur.Nom (Orientation: @mur.Orientation)</option>
                                                }
                                            }
                                        </InputSelect>
                                    </div>

                                    <div class="mb-3">
                                        <label class="form-label">État</label>
                                        <InputSelect class="form-control" @bind-Value="currentCapteur.EstActif">
                                            <option value="true">Actif</option>
                                            <option value="false">Inactif</option>
                                        </InputSelect>
                                    </div>

                                    <div class="row">
                                        <div class="col-md-6">
                                            <div class="mb-3">
                                                <label class="form-label">Position X</label>
                                                <InputNumber class="form-control" @bind-Value="currentCapteur.PositionX" />
                                            </div>
                                        </div>
                                        <div class="col-md-6">
                                            <div class="mb-3">
                                                <label class="form-label">Position Y</label>
                                                <InputNumber class="form-control" @bind-Value="currentCapteur.PositionY" />
                                            </div>
                                        </div>
                                    </div>

                                    <div class="row">
                                        <div class="col-md-6">
                                            <div class="mb-3">
                                                <label class="form-label">Longueur (cm)</label>
                                                <InputNumber class="form-control" @bind-Value="currentCapteur.Longueur" />
                                            </div>
                                        </div>
                                        <div class="col-md-6">
                                            <div class="mb-3">
                                                <label class="form-label">Hauteur (cm)</label>
                                                <InputNumber class="form-control" @bind-Value="currentCapteur.Hauteur" />
                                            </div>
                                        </div>
                                    </div>

                                    <div class="row">
                                        <div class="col-md-6">
                                            <div class="mb-3">
                                                <label class="form-label">Distance Fenetre</label>
                                                <InputNumber class="form-control" @bind-Value="currentCapteur.DistanceFenetre" />
                                            </div>
                                        </div>
                                        <div class="col-md-6">
                                            <div class="mb-3">
                                                <label class="form-label">Distance Porte</label>
                                                <InputNumber class="form-control" @bind-Value="currentCapteur.DistancePorte" />
                                            </div>
                                        </div>
                                        <div class="col-md-6">
                                            <div class="mb-3">
                                                <label class="form-label">Distance Chauffage</label>
                                                <InputNumber class="form-control" @bind-Value="currentCapteur.DistanceChauffage" />
                                            </div>
                                        </div>
                                    </div>
                                </div>

                <!-- Colonne de la visualisation -->
                            <!-- Colonne de la visualisation -->
                                <div class="col-md-6">
    <div class="d-flex flex-column">
        <div class="mb-3">
                                            <label class="form-label">Aperçu du positionnement</label>
                                            <ul class="list-unstyled mt-2">
                                                <li>Position capteur: (@currentCapteur.PositionX, @currentCapteur.PositionY) cm</li>
                                                <li>Dimensions capteur: @currentCapteur.Longueur x @currentCapteur.Hauteur cm</li>
                                                <li>Dimensions mur: @selectedMur?.Longueur x @(selectedMur?.Hauteur) cm</li>
                                            </ul>
                                            <ul class="list-unstyled mt-2">
                                                <li class="mb-1">
                                                    <span class="d-inline-block me-2" style="width: 20px; height: 20px; background-color: #808080; opacity: 0.5; border: 2px solid #505050"></span>
                                                    Équipements
                                                </li>
                                                <li class="mb-1">
                                                    <span class="d-inline-block me-2" style="width: 20px; height: 20px; background-color: #FFFF00; opacity: 0.5; border: 2px solid #FFA500"></span>
                                                    Autres capteurs
                                                </li>
                                                <li>
                                                    <span class="d-inline-block me-2" style="width: 20px; height: 20px; background-color: #007bff; opacity: 0.5; border: 2px solid #0056b3"></span>
                                                    Capteur actuel
                                                </li>
                                            </ul>
            <div class="border rounded p-3">
                @if (currentCapteur.MurId == 0 || currentCapteur.MurId == null || selectedMur == null)
                {
                    <div class="d-flex justify-content-center align-items-center" style="height: 400px">
                        <div class="text-muted">
                            <i class="bi bi-arrows-move me-2"></i>
                            Sélectionnez un mur pour visualiser
                        </div>
                    </div>
                }
                else
                {
                    @* Calcul de l'échelle *@
                    @* Définition de l'échelle en fonction de la longueur du mur (ajustez selon vos besoins) *@
                    @* Si le mur est plus long que 400 cm, on réduit l'échelle pour qu'il tienne dans la vue. *@
                    
                        double scaleFactor = 1.0;
                        double maxWidth = 400; // Largeur du SVG
                        double wallLength = selectedMur.Longueur;
                        if (wallLength > maxWidth)
                        {
                            scaleFactor = maxWidth / wallLength;
                        }
                        double scaledWidth = wallLength * scaleFactor;
                        double scaledHeight = selectedMur.Hauteur * scaleFactor;
                        double margin = 20; // marge pour la position de départ
                        double svgWidth = scaledWidth + margin * 2; // Ajouter la marge de chaque côté
                       double svgHeight = scaledHeight + margin * 2; // Ajouter la marge en haut et en bas
                    
                    <svg width="100%" height="400" viewBox="0 0 @(Math.Round(svgWidth)) @(Math.Round(svgHeight))">
                        <!-- Grille -->
                        <defs>
                            <pattern id="grid" width="40" height="40" patternUnits="userSpaceOnUse">
                                <path d="M 40 0 L 0 0 0 40" fill="none" stroke="gray" stroke-width="0.5" stroke-opacity="0.3" />
                            </pattern>
                        </defs>
                        <rect width="100%" height="100%" fill="url(#grid)" style="stroke: #ccc; stroke-width: 1" />

                        <!-- Rectangle délimitant le mur -->
                        <rect x="@margin"
                              y="@margin"
                              width="@(Math.Round(scaledWidth))"
                              height="@(Math.Round(scaledHeight))"
                              fill="none"
                              stroke="#000000"
                              stroke-width="3" />

                        @if (selectedMur.Equipements != null)
                        {
                            @foreach (var capteur in selectedMur.Capteurs)
                            {
                                @if(capteur.CapteurId != currentCapteur.CapteurId)
                                {
                                    <rect x="@(Math.Round(margin + capteur.PositionX * scaleFactor))"
                                          y="@(Math.Round(margin + capteur.PositionY * scaleFactor))"
                                          width="@(Math.Round(capteur.Longueur * scaleFactor))"
                                          height="@(Math.Round(capteur.Hauteur * scaleFactor))"
                                          fill="#FFFF00"  
                                          fill-opacity="0.5"
                                          stroke="#FFA500"
                                          stroke-width="2" />
                                }
                            }
                        }

                        @if (selectedMur.Equipements != null)
                        {
                            <!-- Affichage des équipements du mur -->
                            @foreach (var equipement in selectedMur.Equipements)
                            {
                                <rect x="@(Math.Round(margin + equipement.PositionX * scaleFactor))"
                                      y="@(Math.Round(margin + equipement.PositionY * scaleFactor))"
                                      width="@(Math.Round(equipement.Longueur * scaleFactor))"
                                      height="@(Math.Round(equipement.Hauteur * scaleFactor))"
                                      fill="#808080"
                                      fill-opacity="0.5"
                                      stroke="#505050"
                                      stroke-width="2" />
                            }
                        }

                        <!-- Capteur -->
                        <rect x="@(Math.Round(margin + currentCapteur.PositionX * scaleFactor))"
                              y="@(Math.Round(margin + currentCapteur.PositionY * scaleFactor))"
                              width="@(Math.Round(currentCapteur.Longueur * scaleFactor))"
                              height="@(Math.Round(currentCapteur.Hauteur * scaleFactor))"
                              fill="#007bff"
                              fill-opacity="0.5"
                              stroke="#0056b3"
                              stroke-width="2" />

                        <!-- Point d'origine du capteur -->
                        <circle cx="@(Math.Round(margin + currentCapteur.PositionX * scaleFactor))"
                                cy="@(Math.Round(margin + currentCapteur.PositionY * scaleFactor))"
                                r="2"
                                fill="red" />
                    </svg>
                }
            </div>
        </div>
    </div>
</div>

                            </div>

                            <div class="mt-4 d-flex align-items-center gap-3">
                                <div>
                                    <button type="submit" class="btn btn-primary" disabled="@isProcessing">
                                        @if (isProcessing)
                                        {
                                            <span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
                                        }
                                        @progressStatus
                                    </button>
                                </div>
                                <div>
                                    <button type="button" class="btn btn-secondary" @onclick="CloseCapteurModal">Annuler</button>
                                </div>
                                @if (!string.IsNullOrEmpty(validationMessage))
                                {
                                    <div class="alert alert-danger mb-0 w-100 d-flex align-items-center" role="alert">
                                        @validationMessage
                                    </div>
                                }
                            </div>
                        </EditForm>
                    </div>
                </div>
            </div>
        </div>
    }

    <!-- Modal de confirmation pour la suppression -->
    @if (showDeleteConfirmation)
    {
        <div class="modal-backdrop fade show"></div>
        <div class="modal fade show" style="display: block;" tabindex="-1">
            <div class="modal-dialog modal-dialog-centered">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">Confirmer la suppression</h5>
                        <button type="button" class="btn-close" @onclick="() => showDeleteConfirmation = false"></button>
                    </div>
                    <div class="modal-body">
                        <p>Êtes-vous sûr de vouloir supprimer ce capteur ?</p>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" @onclick="() => showDeleteConfirmation = false">Annuler</button>
                        <button type="button" class="btn btn-danger" @onclick="ConfirmDelete">Supprimer</button>
                    </div>
                </div>
            </div>
        </div>
    }
</div>

@code {
    private bool showCapteurModal = false;
    private bool showDeleteConfirmation = false;
    private bool isNewCapteur = true;
    private Capteur currentCapteur = new();
    private Capteur capteurToDelete;
    private Mur selectedMur = new() ;
    private bool isProcessing = false;
    private string progressStatus => isNewCapteur ?
        (isProcessing ? "Création en cours..." : "Créer") :
        (isProcessing ? "Modification en cours..." : "Modifier");
    private string validationMessage = "";

    protected override async Task OnInitializedAsync()
    {
        await ViewModel.LoadDataAsync();
    }

    private void EditCapteur(Capteur capteur)
    {
        currentCapteur = new Capteur
            {
                CapteurId = capteur.CapteurId,
                Nom = capteur.Nom,
                EstActif = capteur.EstActif,
                Longueur = capteur.Longueur,
                Hauteur = capteur.Hauteur,
                PositionX = capteur.PositionX,
                PositionY = capteur.PositionY,
                DistanceFenetre = capteur.DistanceFenetre,
                DistancePorte = capteur.DistancePorte,
                DistanceChauffage = capteur.DistanceChauffage,
                SalleId = capteur.SalleId,
                MurId = capteur.MurId
            };
        isNewCapteur = false;
        showCapteurModal = true;
        selectedMur = ViewModel.Salles
    .FirstOrDefault(s => s.SalleId == currentCapteur.SalleId)?
    .Murs.FirstOrDefault(m => m.MurId == currentCapteur.MurId);
    }

    private bool ValidateForm()
    {
        validationMessage = null;

        // Vérification du nom
        if (string.IsNullOrWhiteSpace(currentCapteur?.Nom))
        {
            validationMessage = "Le nom du capteur est requis.";
            return false;
        }

        // Vérification des positions
        if (currentCapteur?.PositionX < 0)
        {
            validationMessage = "La position X doit être positive.";
            return false;
        }
        if (currentCapteur?.PositionY < 0)
        {
            validationMessage = "La position Y doit être positive.";
            return false;
        }

        // Vérification des dimensions
        if (currentCapteur?.Longueur <= 0 || currentCapteur?.Longueur == null)
        {
            validationMessage = "La longueur doit être supérieure à 0.";
            return false;
        }
        if (currentCapteur?.Hauteur <= 0 || currentCapteur?.Hauteur == null)
        {
            validationMessage = "La hauteur doit être supérieure à 0.";
            return false;
        }

        // Vérification des distances
        if (currentCapteur?.DistanceFenetre < 0)
        {
            validationMessage = "La distance à la fenêtre doit être positive.";
            return false;
        }
        if (currentCapteur?.DistancePorte < 0)
        {
            validationMessage = "La distance à la porte doit être positive.";
            return false;
        }
        if (currentCapteur?.DistanceChauffage < 0)
        {
            validationMessage = "La distance au chauffage doit être positive.";
            return false;
        }

        // Vérification des dimensions du capteur par rapport au mur
        var mur = ViewModel?.Salles
            .FirstOrDefault(s => s.SalleId == currentCapteur.SalleId)?
            .Murs.FirstOrDefault(m => m.MurId == currentCapteur.MurId);

        if (mur != null)
        {
            if (currentCapteur.Longueur > mur.Longueur)
            {
                validationMessage = "La longueur du capteur ne peut pas dépasser celle du mur.";
                return false;
            }
            if (currentCapteur.Hauteur > mur.Hauteur)
            {
                validationMessage = "La hauteur du capteur ne peut pas dépasser celle du mur.";
                return false;
            }
            if (currentCapteur.PositionX > mur.Longueur)
            {
                validationMessage = "La position X ne peut pas dépasser la longueur du mur.";
                return false;
            }
            if (currentCapteur.PositionY > mur.Hauteur)
            {
                validationMessage = "La position Y ne peut pas dépasser la hauteur du mur.";
                return false;
            }
        }

        return true;
    }


    private Task MurIdChanged()
    {
        // Rechercher le mur sélectionné
        selectedMur = ViewModel.Salles
            .FirstOrDefault(s => s.SalleId == currentCapteur.SalleId)?
            .Murs.FirstOrDefault(m => m.MurId == currentCapteur.MurId);
        return Task.CompletedTask;
    }

    private void DeleteCapteur(Capteur capteur)
    {
        capteurToDelete = capteur;
        showDeleteConfirmation = true;
    }

    private async Task ConfirmDelete()
    {
        try
        {
            await ViewModel.DeleteCapteurAsync(capteurToDelete.CapteurId);
            showDeleteConfirmation = false;
            await ViewModel.LoadDataAsync();
        }
        catch (Exception ex)
        {
            ViewModel.ErrorMessage = "Une erreur est survenue lors de la suppression : " + ex.Message;
        }
    }


    private async Task HandleCapteurSubmit()
    {
        try
        {
            isProcessing = true;
            validationMessage = "";

            // Validation des champs avant l'enregistrement
            if (!ValidateForm())
            {
                return;
            }

            // Création du DTO avec les valeurs actuelles
            CapteurDTO capteurDto = new CapteurDTO()
                {
                    CapteurId = currentCapteur.CapteurId,
                    Nom = currentCapteur.Nom,
                    EstActif = currentCapteur.EstActif,
                    SalleId = currentCapteur.SalleId,
                    MurId = currentCapteur.MurId,
                    PositionX = currentCapteur.PositionX,
                    PositionY = currentCapteur.PositionY,
                    DistanceFenetre = currentCapteur.DistanceFenetre,
                    DistancePorte = currentCapteur.DistancePorte,
                    DistanceChauffage = currentCapteur.DistanceChauffage,
                    Longueur = currentCapteur.Longueur,
                    Hauteur = currentCapteur.Hauteur
                };

            // Ajout ou mise à jour selon le cas
            if (isNewCapteur)
            {
                await ViewModel.AddCapteurAsync(capteurDto);
            }
            else
            {
                await ViewModel.UpdateCapteurAsync(capteurDto);
            }

            // Rafraîchissement des données et fermeture de la modale
            await ViewModel.LoadDataAsync();
            showCapteurModal = false;
        }
        catch (Exception ex)
        {
            validationMessage = "Une erreur est survenue : " + ex.Message;
        }
        finally
        {
            isProcessing = false;
        }
    }

    private void CloseCapteurModal()
    {
        showCapteurModal = false;
        currentCapteur = new();
    }
}