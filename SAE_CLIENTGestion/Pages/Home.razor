@page "/"
@inject IBabylonJSService BabylonService
@inject IJSRuntime JS
@implements IAsyncDisposable
<PageTitle>Home</PageTitle>

<div class="babylon-container">
    <canvas id="renderCanvas"></canvas>
</div>

<style>
    .babylon-container {
        width: 100%;
        height: 100vh;
        position: relative;
        overflow: hidden;
    }

    #renderCanvas {
        width: 100%;
        height: 100%;
        touch-action: none;
        display: block;
        outline: none;
    }
    /* Assurer que le conteneur prend tout l'espace disponible */
    :root, body, #app {
        margin: 0;
        padding: 0;
        height: 100%;
    }
</style>

@code {
    private bool _disposed = false;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && !_disposed)
        {
            try
            {
                // Initialise la scène avec le singleton
                await BabylonService.InitializeSceneAsync("renderCanvas");
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error initializing scene: {ex.Message}");
                await JS.InvokeVoidAsync("console.log", "Error:", ex.Message);
            }
        }
    }

    public async ValueTask DisposeAsync()
    {
        if (!_disposed)
        {
            try
            {
                _disposed = true;
                await BabylonService.DisposeSceneAsync();
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error disposing scene: {ex.Message}");
                await JS.InvokeVoidAsync("console.log", "Dispose Error:", ex);
            }
        }
    }
}