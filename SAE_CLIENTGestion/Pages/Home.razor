@page "/"
@inject IBabylonJSService BabylonService
@inject IJSRuntime JS
@implements IAsyncDisposable

<PageTitle>Home</PageTitle>

<div class="babylon-container">
    <canvas id="renderCanvas"></canvas>
    
    @if (!isLoaded)
    {
        <div class="loading-overlay">
            <div class="spinner"></div>
            <div class="loading-text">Chargement en cours...</div>
        </div>
    }
</div>

<style>
    .babylon-container {
        width: 100%;
        height: 100vh;
        position: relative;
        overflow: hidden;
    }

    #renderCanvas {
        width: 100%;
        height: 100%;
        touch-action: none;
        display: block;
        outline: none;
    }

    /* Styles pour l'écran de chargement */
    .loading-overlay {
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background-color: rgba(0, 0, 0, 0.8);
        display: flex;
        flex-direction: column;
        justify-content: center;
        align-items: center;
        z-index: 1000;
    }

    .spinner {
        width: 50px;
        height: 50px;
        border: 5px solid #f3f3f3;
        border-top: 5px solid #3498db;
        border-radius: 50%;
        animation: spin 1s linear infinite;
        margin-bottom: 20px;
    }

    .loading-text {
        color: white;
        font-size: 1.2rem;
    }

    @@keyframes spin {
        0% { transform: rotate(0deg); }
        100% { transform: rotate(360deg); }
    }

    /* Assurer que le conteneur prend tout l'espace disponible */
    :root, body, #app {
        margin: 0;
        padding: 0;
        height: 100%;
    }
</style>

@code {
    private bool _disposed = false;
    private bool isLoaded = false;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && !_disposed)
        {
            try
            {
                // Initialise la scène avec le singleton
                await BabylonService.InitializeSceneAsync("renderCanvas");
                isLoaded = true;
                StateHasChanged();
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error initializing scene: {ex.Message}");
                await JS.InvokeVoidAsync("console.log", "Error:", ex.Message);
            }
        }
    }

    public async ValueTask DisposeAsync()
    {
        if (!_disposed)
        {
            try
            {
                _disposed = true;
                await BabylonService.DisposeSceneAsync();
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error disposing scene: {ex.Message}");
                await JS.InvokeVoidAsync("console.log", "Dispose Error:", ex);
            }
        }
    }
}