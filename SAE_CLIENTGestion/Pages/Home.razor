@page "/"
@inject IBabylonJSService BabylonService
@inject IJSRuntime JS
@implements IAsyncDisposable

<PageTitle>Home</PageTitle>

<div class="babylon-container">
    @if (isLoaded)
    {
        <div style="position: absolute; bottom: 10px; right: 10px; z-index: 1000;">
            <!-- Icône d'ouverture/fermeture -->
            @if (!isHelpVisible)
            {
                <!-- Bouton pour ouvrir -->
                <button @onclick="ToggleHelp" class="btn btn-primary">
                    <i class="bi bi-list" style="font-size: 1.5rem;"></i>
                </button>
            }
            else
            {


                <!-- Contenu de l'aide -->
                <div style="display: flex; flex-direction: column; color: white;">
                    <div style="padding: 5px; background-color: rgba(0, 0, 0, 0.7); display: flex; justify-content: space-between; align-items: center; border-top-left-radius: 5px; border-top-right-radius: 5px;">
                        <p style="margin: 0; font-size: large; width: fit-content; display: flex; align-items: center; justify-content: center;">Contrôles caméra</p>
                        <button @onclick="ToggleHelp" class="btn">
                            <i class="bi bi-x-lg" style="font-size: 1.5rem; color: white;"></i>
                        </button>
                    </div>
                    <div style="background-color: rgba(0, 0, 0, 0.7); padding-left: 10px; padding-right: 10px; border-bottom-left-radius: 5px; border-bottom-right-radius: 5px; width: 250px;">
                        <ul style="margin: 5px 0; padding-left: 20px;">
                            <li><strong>Clique gauche</strong>: Tourner la caméra</li>
                            <li><strong>Clique droit</strong>: Déplacer la caméra</li>
                            <li><strong>Molette</strong>: Zoomer</li>
                        </ul>
                    </div>
                </div>
            }
        </div>
    }

    <canvas id="renderCanvas"></canvas>

    @if (!isLoaded)
    {
        <div class="loading-overlay">
            <div class="spinner"></div>
            <div class="loading-text">Chargement en cours...</div>
        </div>
    }
</div>

<style>
    .babylon-container {
        width: 100vw;
        height: 100%;
        overflow: hidden;
    }

    #renderCanvas {
        width: 100%;
        height: 100%;
        touch-action: none;
        display: block;
        outline: none;
    }

    /* Styles pour l'écran de chargement */
    .loading-overlay {
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background-color: rgba(0, 0, 0, 0.8);
        display: flex;
        flex-direction: column;
        justify-content: center;
        align-items: center;
    }

    .spinner {
        width: 50px;
        height: 50px;
        border: 5px solid #f3f3f3;
        border-top: 5px solid #3498db;
        border-radius: 50%;
        animation: spin 1s linear infinite;
        margin-bottom: 20px;
    }

    .loading-text {
        color: white;
        font-size: 1.2rem;
    }

    @@keyframes spin {
        0% {
            transform: rotate(0deg);
        }

        100% {
            transform: rotate(360deg);
        }
    }

    /* Assurer que le conteneur prend tout l'espace disponible */
    :root, body, #app {
        margin: 0;
        padding: 0;
        height: 100%;
    }
</style>
@code {
    private bool _disposed = false;
    private bool isLoaded = false;
    private bool isHelpVisible = false; // Variable pour contrôler la visibilité de l'aide

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && !_disposed)
        {
            try
            {
                // Initialise la scène avec le singleton
                await BabylonService.InitializeSceneAsync("renderCanvas");
                isLoaded = true;
                StateHasChanged();
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error initializing scene: {ex.Message}");
                await JS.InvokeVoidAsync("console.log", "Error:", ex.Message);
            }
        }
    }

    private void ToggleHelp()
    {
        isHelpVisible = !isHelpVisible; // Alterne entre afficher et masquer l'aide
    }

    public async ValueTask DisposeAsync()
    {
        if (!_disposed)
        {
            try
            {
                _disposed = true;
                await BabylonService.DisposeSceneAsync();
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error disposing scene: {ex.Message}");
                await JS.InvokeVoidAsync("console.log", "Dispose Error:", ex);
            }
        }
    }
}