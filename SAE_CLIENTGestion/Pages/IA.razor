@page "/prediction"
@inject PredictionViewModel ViewModel
@inject PredictionService PredictionService
<PageTitle>Prediction IA</PageTitle>

<!-- Section Température -->
<div class="container" style="margin-top: 30px;">
    <h3 class="text-center text-primary">Prédiction IA</h3>

    <div class="text-center mt-4">
        <button @onclick="FetchTemperatureData" class="btn btn-primary btn-lg">Obtenir les données de température et les prédictions</button>
    </div>

    @if (ViewModel.IsLoading)
    {
        <p class="text-center">Chargement...</p>
    }
    else if (!string.IsNullOrEmpty(ViewModel.ErrorMessage))
    {
        <p class="text-center text-danger">@ViewModel.ErrorMessage</p>
    }
    else
    {
        @if (ViewModel.AllData.Count == 0)
        {
            <p class="text-center">Aucune donnée disponible. Cliquez sur le bouton pour récupérer les données.</p>
        }
        else
        {
            <!-- Graphique SVG -->
            <div style="margin: 20px 0; width: 100%; border: 1px solid #ddd; border-radius: 8px; box-shadow: 0 4px 10px rgba(0,0,0,0.1); padding: 20px;">
                <svg style="width: 100%; height: 300px; background-color: #f8f9fa;" viewBox="0 0 1200 300" preserveAspectRatio="xMidYMid meet">
                    <!-- Grille de fond -->
                    @for (int i = 1; i < 10; i++)
                    {
                        <line x1="50" y1="@(50 + i * 20)" x2="1150" y2="@(50 + i * 20)"
                              stroke="#e9ecef" stroke-width="1" />
                    }
                    @for (int i = 1; i < 22; i++)
                    {
                        <line x1="@(50 + i * 50)" y1="50" x2="@(50 + i * 50)" y2="250"
                              stroke="#e9ecef" stroke-width="1" />
                    }

                    <!-- Axe Y avec graduations et valeurs -->
                    <line x1="50" y1="250" x2="50" y2="50" stroke="black" stroke-width="2" />
                    @{
                        var dataPoints = ViewModel.AllData.OrderBy(d => d.Time).ToList();
                        var maxTemp = dataPoints.Max(d => Convert.ToDouble(d.Temperature));
                        var minTemp = dataPoints.Min(d => Convert.ToDouble(d.Temperature));
                        var tempRange = maxTemp - minTemp;

                        for (int i = 0; i <= 10; i++)
                        {
                            var temp = maxTemp - (i * (tempRange / 10));
                            var yPos = 50 + i * 20;

                            <line x1="45" y1="@yPos" x2="50" y2="@yPos" stroke="black" stroke-width="2" />
                            <text:svg x="40" y="@(yPos + 5)" style="font-size: 12px;" text-anchor="end" dominant-baseline="middle">@temp.ToString("F1")</text:svg>
                        }
                    }

                    <!-- Axe X avec graduations -->
                    <line x1="50" y1="250" x2="1150" y2="250" stroke="black" stroke-width="2" />
                    @for (int i = 0; i <= 22; i++)
                    {
                        <line x1="@(50 + i * 50)" y1="250" x2="@(50 + i * 50)" y2="255"
                              stroke="black" stroke-width="2" />
                    }

                    <!-- Lignes du graphique -->
                    @for (int i = 1; i < dataPoints.Count; i++)
                    {
                        double prevXPos = Math.Round(50 + (1100.0 * (i - 1) / (dataPoints.Count - 1)));
                        double prevYPos = Math.Round(250 - (200.0 * (Convert.ToDouble(dataPoints[i - 1].Temperature) - minTemp) / (tempRange == 0 ? 1 : tempRange)));
                        double xPos = Math.Round(50 + (1100.0 * i / (dataPoints.Count - 1)));
                        double yPos = Math.Round(250 - (200.0 * (Convert.ToDouble(dataPoints[i].Temperature) - minTemp) / (tempRange == 0 ? 1 : tempRange)));
                        var color = dataPoints[i].IsPredicted ? "#ff6b6b" : "#4dabf7";

                        <line x1="@prevXPos"
                              y1="@prevYPos"
                              x2="@xPos"
                              y2="@yPos"
                              stroke="@color"
                              stroke-width="2"
                              stroke-dasharray="@(dataPoints[i].IsPredicted ? "5,5" : "none")"
                              @onclick="() => ShowTooltip(dataPoints[i])" />
                    }
                </svg>
            </div>

            <!-- Légende -->
            <div style="margin: 10px 0; text-align: center;">
                <span style="margin-right: 20px;">
                    <span style="display: inline-block; width: 20px; height: 2px; background-color: #4dabf7; margin-right: 5px;"></span>
                    Données actuelles
                </span>
                <span>
                    <span style="display: inline-block; width: 20px; height: 2px; background-color: #ff6b6b; margin-right: 5px; border-top: 2px dashed;"></span>
                    Prédictions
                </span>
            </div>

            <!-- Tableau de données -->
            <div class="table-responsive mt-4">
                <table class="table table-striped table-bordered">
                    <thead>
                        <tr>
                            <th>Température (°C)</th>
                            <th>Temps</th>
                            <th>Type</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var item in ViewModel.AllData)
                        {
                            <tr>
                                <td>@item.Temperature °C</td>
                                <td>@item.Time</td>
                                <td>@(item.IsPredicted ? "Prédite" : "Actuelle")</td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        }
    }
</div>

@code {
    private async Task FetchTemperatureData()
    {
        ViewModel.AllData.Clear();
        await ViewModel.FetchAllDataAsync();
    }

    private void ShowTooltip(dynamic dataPoint)
    {
        Console.WriteLine($"Température: {dataPoint.Temperature}°C, Temps: {dataPoint.Time}, Type: {(dataPoint.IsPredicted ? "Prédite" : "Actuelle")}");
    }
}
