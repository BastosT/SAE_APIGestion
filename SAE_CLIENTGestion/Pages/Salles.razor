@page "/salles"
@using SAE_CLIENTGestion.Models
@using SAE_CLIENTGestion.Models.DTO
@using SAE_CLIENTGestion.ViewModels
<link href="css/salles.css" rel="stylesheet" />
@inject IJSRuntime JS
@inject SallesViewModel ViewModel
@inject NavigationManager NavigationManager

<PageTitle>Gestion des Salles</PageTitle>

<style>
    .custom-table tr:hover {
        background-color: rgba(var(--bs-primary-rgb), 0.03) !important;
    }



    .card {
        transition: all 0.3s ease;
    }

        .card:hover {
            box-shadow: 0 .5rem 1rem rgba(0,0,0,.1) !important;
            transform: translateY(-2px);
        }

    .hover-card {
        transition: all 0.3s ease;
    }

        .hover-card:hover {
            transform: translateY(-2px);
            box-shadow: 0 .5rem 1rem rgba(0,0,0,.08) !important;
        }

    .btn-light:hover {
        background-color: var(--bs-light);
        transform: translateY(-1px);
        transition: all 0.2s ease;
    }

    .room-walls-container {
        border: 1px solid rgba(0,0,0,.05);
    }

    .bg-light {
        background-color: rgba(var(--bs-primary-rgb), 0.03) !important;
    }

    .room-svg {
        border-radius: 0.5rem;
    }
</style>

<div class="container-fluid main-content overflow-auto">
    @if (!string.IsNullOrEmpty(ViewModel.SuccessMessage))
    {
        <div class="alert alert-success alert-dismissible fade show custom-alert" role="alert">
            @ViewModel.SuccessMessage
            <button type="button" class="btn-close" @onclick="() => ViewModel.SuccessMessage = null"></button>
        </div>
    }

    @if (!string.IsNullOrEmpty(ViewModel.ErrorMessage))
    {
        <div class="alert alert-danger alert-dismissible fade show custom-alert" role="alert">
            @ViewModel.ErrorMessage
            <button type="button" class="btn-close" @onclick="() => ViewModel.ErrorMessage = null"></button>
        </div>
    }


    <!-- Section Types de Salle -->
    <div class="container-fluid p-4">
        <div class="card shadow border-0 rounded-3">
            <!-- Header avec gradient subtil -->
            <div class="card-header py-4 border-bottom border-light" style="background-color: #a1a1a1">
                <div class="d-flex justify-content-between align-items-center px-2">
                    <div class="d-flex align-items-center gap-2">
                        <i class="bi bi-grid-3x3-gap fs-4 text-white"></i>
                        <h3 class="mb-0 fw-bold text-white">Types de Salle</h3>
                    </div>
                    <button class="btn btn-primary d-flex align-items-center gap-3 rounded-pill px-4 py-2 shadow-sm"
                            @onclick="() => { currentTypeSalle = new(); showTypeSalleModal = true; isNewTypeSalle = true; }">
                        <i class="bi bi-plus-circle-fill fs-5"></i>
                        <span class="fw-medium">Nouveau Type de Salle</span>
                    </button>
                </div>
            </div>

            <div class=" p-4" >
                @if (ViewModel.IsLoading)
                {
                    <div class="d-flex flex-column justify-content-center align-items-center py-5">
                        <div class="spinner-border  mb-3" role="status">
                            <span class="visually-hidden">Chargement...</span>
                        </div>
                        <span class="text-muted">Chargement des types de salle...</span>
                    </div>
                }
                else if (!ViewModel.TypesSalle.Any())
                {
                    <div class="alert alert-info border-0 shadow-sm d-flex align-items-center m-3 rounded-3">
                        <i class="bi bi-info-circle-fill me-3 fs-4"></i>
                        <div>
                            <h6 class="mb-0 fw-semibold">Aucun type de salle</h6>
                            <small class="text-muted">Commencez par créer votre premier type de salle</small>
                        </div>
                    </div>
                }
                else
                {
                    <div class="table-responsive">
                        <table class="table table-hover align-middle mb-0 custom-table">
                            <thead class="bg-light border-bottom">
                                <tr>
                                    <th class="fw-semibold px-4 py-3 border-0">
                                        <div class="text-primary">Nom</div>
                                    </th>
                                    <th class="fw-semibold px-4 py-3 border-0">
                                        <div class="text-primary">Description</div>
                                    </th>
                                    <th class="text-end fw-semibold px-4 py-3 border-0">
                                        <div class="text-primary">Actions</div>
                                    </th>
                                </tr>
                            </thead>
                            <tbody class="border-top-0">
                                @foreach (var typeSalle in ViewModel.TypesSalle)
                                {
                                    <tr class="border-bottom">
                                        <td class="px-4 py-3">
                                            <div class="fw-semibold">@typeSalle.Nom</div>
                                        </td>
                                        <td class="px-4 py-3 fw-semibold">@typeSalle.Description</td>
                                        <td class="px-4 py-3 text-end">
                                            <div class="btn-group">
                                                <button class="btn btn-light btn-sm rounded-start-2 shadow-sm me-1"
                                                        @onclick="() => EditTypeSalle(typeSalle)"
                                                        data-bs-toggle="tooltip"
                                                        title="Modifier">
                                                    <i class="bi bi-pencil-square text-black"></i>
                                                </button>
                                                <button class="btn btn-light btn-sm rounded-end-2 shadow-sm"
                                                        @onclick="() => DeleteTypeSalle(typeSalle)"
                                                        data-bs-toggle="tooltip"
                                                        title="Supprimer">
                                                    <i class="bi bi-trash text-danger"></i>
                                                </button>
                                            </div>
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                }
            </div>
        </div>
    </div>

    <!-- Section existante pour les Salles -->
    <div class="container-fluid p-4">
        <div class="card shadow border-0 rounded-3">
            <!-- Header -->
            <div class="card-header bg-gradient py-4 border-bottom" style="background-color: #a1a1a1">
                <div class="d-flex justify-content-between align-items-center px-2">
                    <div class="d-flex align-items-center gap-2">
                        <i class="bi bi-door-open fs-4 text-white"></i>
                        <h2 class="mb-0 fw-bold text-white">Gestion des Salles</h2>
                    </div>
                    <button class="btn btn-primary d-flex align-items-center gap-3 rounded-pill px-4 py-2 shadow-sm"
                            @onclick='() => NavigationManager.NavigateTo("/addsalle")'>
                        <i class="bi bi-plus-circle-fill fs-5"></i>
                        <span class="fw-medium">Nouvelle Salle</span>
                    </button>
                </div>
            </div>

            <div class="p-4" style="background-color: #cdcdcd;">
                @if (ViewModel.IsLoading)
                {
                    <div class="d-flex flex-column justify-content-center align-items-center py-5">
                        <div class="spinner-border text-primary mb-3" role="status">
                            <span class="visually-hidden">Chargement...</span>
                        </div>
                        <span class="text-muted">Chargement des salles...</span>
                    </div>
                }
                else if (ViewModel.Salles.Count == 0)
                {
                    <div class="alert alert-info border-0 shadow-sm d-flex align-items-center m-3 rounded-3">
                        <i class="bi bi-info-circle-fill me-3 fs-4"></i>
                        <div>
                            <h6 class="mb-0 fw-semibold">Aucune salle</h6>
                            <small class="text-muted">Commencez par créer votre première salle</small>
                        </div>
                    </div>
                }
                else
                {
                    <div class="row row-cols-1 row-cols-md-2 row-cols-xl-3 g-4">
                        @foreach (var salle in ViewModel.Salles)
                        {
                            <div class="col">
                                <div class="card shadow border-0 rounded-3">
                                    <div class="card-header py-4 border-bottom border-light" style="background-color: #a1a1a1">
                                        <div class="d-flex justify-content-between align-items-center px-2">
                                            <div class="d-flex align-items-center gap-2">
                                                <i class="bi bi-door-closed fs-4 text-white"></i>
                                                <h3 class="mb-0 fw-bold text-white">@salle.Nom</h3>
                                            </div>
                                            <div class="btn-group">
                                                <button class="btn btn-light btn-sm rounded-start-2 shadow-sm me-1"
                                                        @onclick='() => NavigationManager.NavigateTo($"/editsalle/{salle.SalleId}")'>
                                                    <i class="bi bi-pencil-square text-black"></i>
                                                </button>
                                                <button class="btn btn-light btn-sm rounded-end-2 shadow-sm"
                                                        @onclick="() => DeleteSalle(salle)">
                                                    <i class="bi bi-trash text-danger"></i>
                                                </button>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="card-body p-4">
                                        <div class="mb-4">
                                            <div class="d-flex align-items-center mb-3 p-3 bg-light rounded-3">
                                                <i class="bi bi-rulers me-3 text-primary fs-5"></i>
                                                <div>
                                                    <h6 class="mb-0 fw-semibold">Surface</h6>
                                                    <small class="text-muted">@salle.Surface m²</small>
                                                </div>
                                            </div>
                                            <div class="d-flex align-items-center mb-3 p-3 bg-light rounded-3">
                                                <i class="bi bi-building me-3 text-primary fs-5"></i>
                                                <div>
                                                    <h6 class="mb-0 fw-semibold">Bâtiment</h6>
                                                    <small class="text-muted">@salle.Batiment.Nom</small>
                                                </div>
                                            </div>
                                            <div class="d-flex align-items-center p-3 bg-light rounded-3">
                                                <i class="bi bi-grid-3x3-gap me-3 text-primary fs-5"></i>
                                                <div>
                                                    <h6 class="mb-0 fw-semibold">Type</h6>
                                                    <small class="text-muted">@salle.TypeSalle.Nom</small>
                                                </div>
                                            </div>
                                        </div>

                                        <div class="room-walls-container bg-light rounded-3 p-3">
                                            @{
                                                const int SCALE = 40;
                                                const int MARGIN = 80;
                                                const int WALL_THICKNESS = 32;

                                                double currentX = MARGIN;
                                                double currentY = MARGIN;
                                                double minX = currentX;
                                                double minY = currentY;
                                                double maxX = currentX;
                                                double maxY = currentY;

                                                foreach (var mur in salle.Murs)
                                                {
                                                    switch (mur.Orientation)
                                                    {
                                                        case Models.MurOrientation.Nord:
                                                            currentX += mur.Longueur * SCALE;
                                                            break;
                                                        case Models.MurOrientation.Sud:
                                                            currentX -= mur.Longueur * SCALE;
                                                            break;
                                                        case Models.MurOrientation.Est:
                                                            currentY += mur.Longueur * SCALE;
                                                            break;
                                                        case Models.MurOrientation.Ouest:
                                                            currentY -= mur.Longueur * SCALE;
                                                            break;
                                                    }
                                                    minX = Math.Min(minX, currentX);
                                                    minY = Math.Min(minY, currentY);
                                                    maxX = Math.Max(maxX, currentX);
                                                    maxY = Math.Max(maxY, currentY);
                                                }

                                                int width = (int)(maxX - minX + 2 * MARGIN);
                                                int height = (int)(maxY - minY + 2 * MARGIN);
                                                int offsetX = (int)(-minX + MARGIN);
                                                int offsetY = (int)(-minY + MARGIN);

                                                width = Math.Max(width, 400);
                                                height = Math.Max(height, 300);

                                                currentX = MARGIN + offsetX;
                                                currentY = MARGIN + offsetY;
                                            }

                                            <svg viewBox="0 0 @width @height" class="room-svg" style="width: 100%; min-height: 300px;">
                                                <pattern id="grid-@salle.SalleId" width="@SCALE" height="@SCALE" patternUnits="userSpaceOnUse">
                                                    <path d="M @SCALE 0 L 0 0 0 @SCALE" fill="none" stroke="#f0f0f0" stroke-width="0.5" />
                                                </pattern>
                                                <rect width="100%" height="100%" fill="url(#grid-@salle.SalleId)" />

                                                @{
                                                    currentX = MARGIN + offsetX;
                                                    currentY = MARGIN + offsetY;
                                                }

                                                @foreach (var mur in salle.Murs)
                                                {
                                                    double previousX = currentX;
                                                    double previousY = currentY;
                                                    double wallLength = mur.Longueur * SCALE;
                                                    double rectX = previousX;
                                                    double rectY = previousY;
                                                    double rectWidth = 0;
                                                    double rectHeight = 0;

                                                    switch (mur.Orientation)
                                                    {
                                                        case Models.MurOrientation.Nord:
                                                            currentX += wallLength;
                                                            rectX = previousX;
                                                            rectY = previousY - WALL_THICKNESS / 2;
                                                            rectWidth = wallLength;
                                                            rectHeight = WALL_THICKNESS;
                                                            break;
                                                        case Models.MurOrientation.Sud:
                                                            currentX -= wallLength;
                                                            rectX = currentX;
                                                            rectY = currentY - WALL_THICKNESS / 2;
                                                            rectWidth = wallLength;
                                                            rectHeight = WALL_THICKNESS;
                                                            break;
                                                        case Models.MurOrientation.Est:
                                                            currentY += wallLength;
                                                            rectX = previousX - WALL_THICKNESS / 2;
                                                            rectY = previousY;
                                                            rectWidth = WALL_THICKNESS;
                                                            rectHeight = wallLength;
                                                            break;
                                                        case Models.MurOrientation.Ouest:
                                                            currentY -= wallLength;
                                                            rectX = previousX - WALL_THICKNESS / 2;
                                                            rectY = currentY;
                                                            rectWidth = WALL_THICKNESS;
                                                            rectHeight = wallLength;
                                                            break;
                                                    }
                                                    <rect x="@rectX" y="@rectY"
                                                          width="@rectWidth" height="@rectHeight"
                                                          fill="#000000"
                                                          opacity="1" />

                                                    <circle cx="@currentX" cy="@currentY" r="2" fill="#666" />

                                                    double labelX = (previousX + currentX) / 2;
                                                    double labelY = (previousY + currentY) / 2;
                                                    double offset = WALL_THICKNESS + 10;

                                                    switch (mur.Orientation)
                                                    {
                                                        case Models.MurOrientation.Nord:
                                                            labelY -= offset;
                                                            break;
                                                        case Models.MurOrientation.Sud:
                                                            labelY += offset;
                                                            break;
                                                        case Models.MurOrientation.Est:
                                                            labelX += offset;
                                                            break;
                                                        case Models.MurOrientation.Ouest:
                                                            labelX -= offset;
                                                            break;
                                                    }

                                                    @((MarkupString)$"<text x='{labelX}' y='{labelY}' text-anchor='middle' fill='#333' style='font-size: 12px;'>{mur.Nom} ({mur.Longueur}m)</text>")
                                                }

                                                <!-- Barre d'échelle -->
                                                <line x1="@MARGIN" y1="@(height - MARGIN/2)" x2="@(MARGIN + SCALE)" y2="@(height - MARGIN/2)"
                                                      stroke="#666" stroke-width="2" />
                                                @((MarkupString)$"<text x='{MARGIN + SCALE / 2}' y='{height - MARGIN / 2 - 5}' text-anchor='middle' fill='#666' style='font-size: 12px;'>1m</text>")
                                            </svg>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        }
                    </div>
                }
            </div>
        </div>
    </div>


    <!-- Modal pour Ajout/Modification de Type de Salle -->
    @if (showTypeSalleModal)
    {
        <div class="modal-backdrop fade show" style="opacity: 0.8; background-color: black; position: fixed; top: 0; left: 0; width: 100vw; height: 100vh; z-index: 1040;"></div>
            <div class="modal fade show" style="display: block; z-index: 1041;" tabindex="-1">
                <div class="modal-dialog modal-dialog-centered">
                    <div class="modal-content">
                        <div class="modal-header">
                            <h5 class="modal-title">@(isNewTypeSalle ? "Nouveau Type de Salle" : "Modifier le Type de Salle")</h5>
                            <button type="button" class="btn-close" @onclick="() => CloseModal()"></button>
                        </div>
                        <div class="modal-body">
                            <EditForm Model="@currentTypeSalle" OnValidSubmit="HandleTypeSalleSubmit">
                                <DataAnnotationsValidator />
                                <ValidationSummary />

                                <div class="mb-3">
                                    <label class="form-label">Nom</label>
                                    <InputText class="form-control" @bind-Value="currentTypeSalle.Nom" />
                                    <ValidationMessage For="@(() => currentTypeSalle.Nom)" />
                                </div>

                                <div class="mb-3">
                                    <label class="form-label">Description</label>
                                    <InputText class="form-control" @bind-Value="currentTypeSalle.Description" />
                                    <ValidationMessage For="@(() => currentTypeSalle.Description)" />
                                </div>

                                <div class="mt-4">
                                    <button type="submit" class="btn btn-primary me-2">Enregistrer</button>
                                    <button type="button" class="btn btn-secondary" @onclick="() => CloseModal()">Annuler</button>
                                </div>
                            </EditForm>
                        </div>
                    </div>
                </div>
            </div>

    }


    <!-- Modal de confirmation pour la suppression de Type de Salle -->
    @if (showDeleteTypeSalleConfirmation)
    {
        <div class="modal-backdrop fade show" style="opacity: 0.8; background-color: black; position: fixed; top: 0; left: 0; width: 100vw; height: 100vh; z-index: 1040;"></div>
        <div class="modal fade show" style="display: block; z-index: 1041;" tabindex="-1">
            <div class="modal-dialog modal-dialog-centered">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">Confirmer la suppression</h5>
                        <button type="button" class="btn-close" @onclick="() => showDeleteTypeSalleConfirmation = false"></button>
                    </div>
                    <div class="modal-body">
                        <p>Êtes-vous sûr de vouloir supprimer ce type de salle ?</p>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" @onclick="() => showDeleteTypeSalleConfirmation = false">Annuler</button>
                        <button type="button" class="btn btn-danger" @onclick="ConfirmDeleteTypeSalle">Supprimer</button>
                    </div>
                </div>
            </div>
        </div>
    }


    <!-- Modal pour Modif de Salle -->
    @if (showModalModif)
    {
        <div class="modal-backdrop fade show" style="opacity: 0.8; background-color: black; position: fixed; top: 0; left: 0; width: 100vw; height: 100vh; z-index: 1040;"></div>
        <div class="modal fade show" style="display: block; z-index: 1041;" tabindex="-1">
            <div class="modal-dialog modal-dialog-centered">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">Modifier la Salle</h5>
                        <button type="button" class="btn-close" @onclick="() => CloseModal()"></button>
                    </div>
                    <div class="modal-body">
                        <EditForm Model="@currentSalle" OnValidSubmit="HandleValidSubmit">
                            <DataAnnotationsValidator />
                            <ValidationSummary />
                            <div>
                                <div class="col-md-6 mb-3">
                                    <label class="form-label">Nom</label>
                                    <InputText class="form-control" @bind-Value="currentSalle.Nom" />
                                    <ValidationMessage For="@(() => currentSalle.Nom)" />
                                </div>

                                <div class="col-md-6 mb-3">
                                    <label class="form-label">Surface (m²)</label>
                                    <InputNumber class="form-control" @bind-Value="currentSalle.Surface" />
                                    <ValidationMessage For="@(() => currentSalle.Surface)" />
                                </div>

                                <div class="col-md-6 mb-3">
                                    <label class="form-label">Bâtiment</label>
                                    <InputSelect class="form-control" @bind-Value="currentSalle.BatimentId">
                                        <option value="">Sélectionner un bâtiment</option>
                                        @foreach (var batiment in ViewModel.Batiments)
                                        {
                                            <option value="@batiment.BatimentId">@batiment.Nom</option>
                                        }
                                    </InputSelect>
                                    <ValidationMessage For="@(() => currentSalle.BatimentId)" />
                                </div>

                                <div class="col-md-6 mb-3">
                                    <label class="form-label">Type de Salle</label>
                                    <InputSelect class="form-control" @bind-Value="currentSalle.TypeSalleId">
                                        <option value="">Sélectionner un type de salle</option>
                                        @foreach (var typeSalle in ViewModel.TypesSalle)
                                        {
                                            <option value="@typeSalle.TypeSalleId">@typeSalle.Nom</option>
                                        }
                                    </InputSelect>
                                    <ValidationMessage For="@(() => currentSalle.TypeSalleId)" />
                                </div>
                            </div>
                            <!-- Nouvelle section pour les murs -->
                            <div class="card mt-3">
                                <div class="card-header d-flex justify-content-between align-items-center">
                                    <h5>Modification des murs</h5>
                                    <div>
                                        <button type="button" class="btn btn-sm btn-primary me-2" @onclick="PreviousWall">
                                            <i class="bi bi-arrow-left"></i>
                                        </button>
                                        <span>Mur @(currentWallIndex + 1)/@currentSalle.Murs?.Count</span>
                                        <button type="button" class="btn btn-sm btn-primary ms-2" @onclick="NextWall">
                                            <i class="bi bi-arrow-right"></i>
                                        </button>
                                    </div>
                                </div>
                                <div class="card-body">
                                    @if (currentWall != null)
                                    {
                                        <div class="row">
                                            <div class="col-md-6">
                                                <div class="mb-3">
                                                    <label class="form-label">Nom du mur</label>
                                                    <InputText class="form-control" @bind-Value="currentWall.Nom" />
                                                </div>
                                                <div class="mb-3">
                                                    <label class="form-label">Longueur (m)</label>
                                                    <InputNumber class="form-control" @bind-Value="currentWall.Longueur" />
                                                </div>
                                                <div class="mb-3">
                                                    <label class="form-label">Hauteur (m)</label>
                                                    <InputNumber class="form-control" @bind-Value="currentWall.Hauteur" />
                                                </div>
                                                <div class="mb-3">
                                                    <label class="form-label">Orientation</label>
                                                    <InputSelect class="form-control" @bind-Value="currentWall.Orientation">
                                                        @foreach (Models.MurOrientation orientation in Enum.GetValues(typeof(Models.MurOrientation)))
                                                        {
                                                            <option value="@orientation">@orientation</option>
                                                        }
                                                    </InputSelect>
                                                </div>
                                            </div>
                                            <div class="col-md-6">
                                                @{
                                                    const int SCALE = 40;
                                                    const int MARGIN = 40;
                                                    const int WALL_THICKNESS = 4;
                                                    // Ajustement du point de départ pour centrer
                                                    double currentX = 160;  // Réduit de 200 à 160
                                                    double currentY = 120;  // Réduit de 150 à 120
                                                }
                                                <div class="border rounded p-2">
                                                    <svg viewBox="0 0 320 240" class="room-preview" style="width: 100%; min-height: 200px;">
                                                        <pattern id="grid-preview" width="@SCALE" height="@SCALE" patternUnits="userSpaceOnUse">
                                                            <path d="M @SCALE 0 L 0 0 0 @SCALE" fill="none" stroke="#f0f0f0" stroke-width="0.5" />
                                                        </pattern>
                                                        <rect width="100%" height="100%" fill="url(#grid-preview)" />

                                                        @foreach (var mur in currentSalle.Murs)
                                                        {
                                                            double previousX = currentX;
                                                            double previousY = currentY;
                                                            double wallLength = mur.Longueur * SCALE;
                                                            double rectX = previousX;
                                                            double rectY = previousY;
                                                            double rectWidth = 0;
                                                            double rectHeight = 0;
                                                            double labelX = 0;
                                                            double labelY = 0;

                                                            switch (mur.Orientation)
                                                            {
                                                                case Models.MurOrientation.Nord:
                                                                    currentX += wallLength;
                                                                    rectX = previousX;
                                                                    rectY = previousY - WALL_THICKNESS / 2;
                                                                    rectWidth = wallLength;
                                                                    rectHeight = WALL_THICKNESS;
                                                                    labelX = (previousX + currentX) / 2;
                                                                    labelY = previousY - (WALL_THICKNESS + 10);
                                                                    break;
                                                                case Models.MurOrientation.Sud:
                                                                    currentX -= wallLength;
                                                                    rectX = currentX;
                                                                    rectY = currentY - WALL_THICKNESS / 2;
                                                                    rectWidth = wallLength;
                                                                    rectHeight = WALL_THICKNESS;
                                                                    labelX = (previousX + currentX) / 2;
                                                                    labelY = currentY + (WALL_THICKNESS + 10);
                                                                    break;
                                                                case Models.MurOrientation.Est:
                                                                    currentY += wallLength;
                                                                    rectX = previousX - WALL_THICKNESS / 2;
                                                                    rectY = previousY;
                                                                    rectWidth = WALL_THICKNESS;
                                                                    rectHeight = wallLength;
                                                                    labelX = previousX + (WALL_THICKNESS + 10);
                                                                    labelY = (previousY + currentY) / 2;
                                                                    break;
                                                                case Models.MurOrientation.Ouest:
                                                                    currentY -= wallLength;
                                                                    rectX = previousX - WALL_THICKNESS / 2;
                                                                    rectY = currentY;
                                                                    rectWidth = WALL_THICKNESS;
                                                                    rectHeight = wallLength;
                                                                    labelX = previousX - (WALL_THICKNESS + 10);
                                                                    labelY = (previousY + currentY) / 2;
                                                                    break;
                                                            }

                                                            string wallColor = mur == currentWall ? "#007bff" : "#dee2e6";

                                                            <rect x="@rectX" y="@rectY"
                                                                  width="@rectWidth" height="@rectHeight"
                                                                  fill="@wallColor"
                                                                  opacity="1" />
                                                            <circle cx="@currentX" cy="@currentY" r="2" fill="#666" />

                                                            @((MarkupString)$"<text x='{labelX}' y='{labelY}' text-anchor='middle' fill='#333' style='font-size: 12px;'>{mur.Nom} ({mur.Longueur}m)</text>")
                                                        }

                                                        <!-- Barre d'échelle -->
                                                        <line x1="@MARGIN" y1="@(200)" x2="@(MARGIN + SCALE)" y2="@(200)"
                                                              stroke="#666" stroke-width="2" />
                                                        @((MarkupString)$"<text x='{MARGIN + SCALE / 2}' y='195' text-anchor='middle' fill='#666' style='font-size: 12px;'>1m</text>")
                                                    </svg>
                                                </div>
                                            </div>
                                        </div>
                                    }
                                </div>
                            </div>
                            <div class="mt-4">
                                <button type="submit" class="btn btn-primary me-2">Enregistrer</button>
                                <button type="button" class="btn btn-secondary" @onclick="() =>CloseModal()">Annuler</button>
                            </div>
                        </EditForm>
                    </div>
                </div>
            </div>
        </div>
    }

    <!-- Modal de confirmation pour la suppression -->
    @if (showDeleteConfirmation){
        <div class="modal-backdrop fade show" style="opacity: 0.8; background-color: black; position: fixed; top: 0; left: 0; width: 100vw; height: 100vh; z-index: 1040;"></div>
            <div class="modal fade show" style="display: block; z-index: 1041;" tabindex="-1">
                <div class="modal-dialog modal-dialog-centered">
                    <div class="modal-content">
                        <div class="modal-header">
                            <h5 class="modal-title">Confirmer la suppression</h5>
                            <button type="button" class="btn-close" @onclick="() => showDeleteConfirmation = false"></button>
                        </div>
                        <div class="modal-body">
                            <p>Êtes-vous sûr de vouloir supprimer cette salle ?</p>
                        </div>
                        <div class="modal-footer">
                            <button type="button" class="btn btn-secondary" @onclick="() => showDeleteConfirmation = false">Annuler</button>
                            <button type="button" class="btn btn-danger" @onclick="ConfirmDelete">Supprimer</button>
                        </div>
                    </div>
                </div>
            </div>
    }

    <!-- Modal pour l'édition/ajout de mur' -->
    @if (showWallModal)
    {
        <div class="modal-backdrop fade show" style="opacity: 0.8; background-color: black; position: fixed; top: 0; left: 0; width: 100vw; height: 100vh; z-index: 1040;"></div>
        <div class="modal fade show" style="display: block; z-index: 1041;" tabindex="-1">
            <div class="modal-dialog modal-dialog-centered">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">Modifier le Mur</h5>
                        <button type="button" class="btn-close" @onclick="() => CloseModal()"></button>
                    </div>
                    <div class="modal-body">
                        <div class="accordion" id="wallAccordion">

                            <!-- Gestion des Capteurs -->
                            <div class="accordion-item">
                                <h2 class="accordion-header">
                                    <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#capteurs">
                                        Capteurs (@(currentMur.Capteurs?.Count ?? 0))
                                    </button>
                                </h2>
                                <div id="capteurs" class="accordion-collapse collapse">
                                    <div class="accordion-body">
                                        <div class="d-flex justify-content-between mb-3">
                                            <h6>Liste des capteurs</h6>
                                            <button class="btn btn-sm btn-primary" @onclick="() => AddNewCapteur()">
                                                <i class="fas fa-plus"></i> Ajouter un capteur
                                            </button>
                                        </div>

                                        @if (currentMur.Capteurs?.Any() != true)
                                        {
                                            <div class="alert alert-info">Aucun capteur installé sur ce mur.</div>
                                        }
                                        else
                                        {
                                            <div class="list-group">
                                                @foreach (var capteur in currentMur.Capteurs)
                                                {
                                                    <div class="list-group-item">
                                                        <div class="d-flex justify-content-between align-items-center">
                                                            <div>
                                                                <h6 class="mb-1">@capteur.Nom</h6>
                                                                <small>Position: X:@capteur.PositionX m, Y:@capteur.PositionY m [Dimensions: @capteur.Longueur x @capteur.Hauteur]</small>
                                                            </div>
                                                            <div>
                                                                <button class="btn btn-sm btn-warning me-2" @onclick="() => EditCapteur(capteur)">
                                                                    <i class="bi bi-pencil"></i>
                                                                </button>
                                                                <button class="btn btn-sm btn-danger" @onclick="() => DeleteCapteur(capteur)">
                                                                    <i class="bi bi-trash"></i>
                                                                </button>
                                                            </div>
                                                        </div>
                                                    </div>
                                                }
                                            </div>
                                        }
                                    </div>
                                </div>
                            </div>

                            <!-- Gestion des Équipements -->
                            <div class="accordion-item">
                                <h2 class="accordion-header">
                                    <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#equipements">
                                        Équipements (@(currentMur.Equipements?.Count ?? 0))
                                    </button>
                                </h2>
                                <div id="equipements" class="accordion-collapse collapse">
                                    <div class="accordion-body">
                                        <div class="d-flex justify-content-between mb-3">
                                            <h6>Liste des équipements</h6>
                                            <button class="btn btn-sm btn-primary" @onclick="() => AddNewEquipement()">
                                                <i class="fas fa-plus"></i> Ajouter un équipement
                                            </button>
                                        </div>

                                        @if (currentMur.Equipements?.Any() != true)
                                        {
                                            <div class="alert alert-info">Aucun équipement installé sur ce mur.</div>
                                        }
                                        else
                                        {
                                            <div class="list-group">
                                                @foreach (var equipement in currentMur.Equipements)
                                                {
                                                    <div class="list-group-item">
                                                        <div class="d-flex justify-content-between align-items-center">
                                                            <div>
                                                                <h6 class="mb-1">@equipement.Nom</h6>
                                                                <small>Position: X:@equipement.PositionX m, Y:@equipement.PositionY m  [Dimensions: @equipement.Longueur x @equipement.Hauteur]</small>
                                                                <small>Type équipement: @equipement.TypeEquipement.Nom</small>
                                                            </div>
                                                            <div>
                                                                <button class="btn btn-sm btn-warning me-2" @onclick="() => EditEquipement(equipement)">
                                                                    <i class="bi bi-pencil"></i>
                                                                </button>
                                                                <button class="btn btn-sm btn-danger" @onclick="() => DeleteEquipement(equipement)">
                                                                    <i class="bi bi-trash"></i>
                                                                </button>
                                                            </div>
                                                        </div>
                                                    </div>
                                                }
                                            </div>
                                        }
                                    </div>
                                </div>
                            </div>
                        </div>

                        <div class="modal-footer">
                            <button type="button" class="btn btn-secondary" @onclick="() => CloseModal()">Fermer</button>
                        </div>
                    </div>
                </div>
            </div>
            </div>
    }

    <!-- Modal pour l'édition/ajout de capteur -->
    @if (showCapteurModal)
    {
        <div class="modal-backdrop fade show" style="opacity: 0.8; background-color: black; position: fixed; top: 0; left: 0; width: 100vw; height: 100vh; z-index: 1040;"></div>
        <div class="modal fade show" style="display: block; z-index: 1041;" tabindex="-1">
            <div class="modal-dialog modal-dialog-centered">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">@(isNewCapteur ? "Nouveau capteur" : "Modifier le capteur")</h5>
                        <button type="button" class="btn-close" @onclick="() => CloseModal()"></button>
                    </div>
                    <div class="alert alert-info mb-3">
                        <strong>Dimensions du mur (Mid: @currentMur.MurId Sid: @currentMur.SalleId):</strong>
                        <div>Longueur : @currentMur.Longueur m</div>
                        <div>Hauteur : @currentMur.Hauteur m</div>
                    </div>
                    <!-- Aperçu SVG -->
                    <div style="border: 1px solid #ccc; margin: 0;">
                        <svg width="100%"
                             height="200"
                             viewBox="0 0 @currentMur.Longueur @currentMur.Hauteur"
                             preserveAspectRatio="xMidYMid meet"
                             style="display: block; margin: 0;">
                            <!-- Mur de fond -->
                            <rect x="0" y="0"
                                  width="@currentMur.Longueur"
                                  height="@currentMur.Hauteur"
                                  fill="#f8f9fa"
                                  stroke="#ccc"
                                  stroke-width="1" />

                            <!-- Équipements existants en gris -->
                            @foreach (var equip in currentMur.Capteurs)
                            {
                                <rect x="@equip.PositionX"
                                      y="@equip.PositionY"
                                      width="@equip.Longueur"
                                      height="@equip.Hauteur"
                                      fill="#dee2e6"
                                      stroke="#adb5bd" />
                            }

                            <!-- Nouvel équipement en cours -->
                            @if (currentCapteur.Longueur > 0 && currentCapteur.Hauteur > 0)
                            {
                                <rect x="@currentCapteur.PositionX"
                                      y="@currentCapteur.PositionY"
                                      width="@currentCapteur.Longueur"
                                      height="@currentCapteur.Hauteur"
                                      fill="@(IsCapteurOutOfBounds() ? "#dc3545" : "#007bff")"
                                      fill-opacity="0.5"
                                      stroke="@(IsCapteurOutOfBounds() ? "#dc3545" : "#0056b3")" />
                            }
                        </svg>
                    </div>
                    <div class="text-center mt-2">
                        <small class="text-muted">
                            Aperçu du positionnement
                            (@(IsCapteurOutOfBounds() ? "rouge : position invalide" : "bleu : position valide"))
                        </small>
                    </div>
                    <div class="modal-body">
                        @if (IsCapteurOutOfBounds())
                        {
                            <div class="alert alert-danger">
                                Le capteur dépasse les dimensions du mur !
                            </div>
                        }
                        <EditForm Model="@currentCapteur" OnValidSubmit="HandleCapteurSubmit">
                            <DataAnnotationsValidator />
                            <ValidationSummary />

                            <div class="mb-3">
                                <label class="form-label">Nom</label>
                                <InputText class="form-control" @bind-Value="currentCapteur.Nom" />
                            </div>

                            <div class="col-md-6 mb-3">
                                <label class="form-label">Position X (m)</label>
                                <InputNumber class="form-control" @bind-Value="currentCapteur.PositionX" />
                            </div>
                            <div class="col-md-6 mb-3">
                                <label class="form-label">Position Y (m)</label>
                                <InputNumber class="form-control" @bind-Value="currentCapteur.PositionY" />
                            </div>
                            <div class="col-md-6 mb-3">
                                <label class="form-label">Longueur</label>
                                <InputNumber class="form-control" @bind-Value="currentCapteur.Longueur" />
                            </div>
                            <div class="col-md-6 mb-3">
                                <label class="form-label">Hauteur</label>
                                <InputNumber class="form-control" @bind-Value="currentCapteur.Hauteur" />
                            </div>
                            <div class="col-md-6 mb-3">
                                <label class="form-label">Distance de la porte</label>
                                <InputNumber class="form-control" @bind-Value="currentCapteur.DistancePorte" />
                            </div>
                            <div class="col-md-6 mb-3">
                                <label class="form-label">Distance du/des Chauffage</label>
                                <InputNumber class="form-control" @bind-Value="currentCapteur.DistanceChauffage" />
                            </div>
                            <div class="col-md-6 mb-3">
                                <label class="form-label">Distance de la/des fenêtre</label>
                                <InputNumber class="form-control" @bind-Value="currentCapteur.DistanceFenetre" />
                            </div>

                            <button type="submit" class="btn btn-primary" disabled="@IsCapteurOutOfBounds()">Enregistrer</button>
                            <button type="button" class="btn btn-secondary" @onclick="() => CloseModal()">Annuler</button>
                        </EditForm>
                    </div>
                </div>
            </div>
            </div>

    }

    <!-- Modal pour l'édition/ajout d'équipement -->
    @if (showEquipementModal)
    {
        <div class="modal-backdrop fade show" style="opacity: 0.8; background-color: black; position: fixed; top: 0; left: 0; width: 100vw; height: 100vh; z-index: 1040;"></div>
        <div class="modal fade show" style="display: block; z-index: 1041;" tabindex="-1">
            <div class="modal-dialog modal-dialog-centered">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">@(isNewEquipement ? "Nouvel équipement" : "Modifier l'équipement")</h5>
                        <button type="button" class="btn-close" @onclick="() => CloseModal()"></button>
                    </div>
                    <div class="alert alert-info mb-3">
                        <strong>Dimensions du mur (Mid: @currentMur.MurId Sid: @currentMur.SalleId):</strong>
                        <div>Longueur : @currentMur.Longueur m</div>
                        <div>Hauteur : @currentMur.Hauteur m</div>
                    </div>

                    <!-- Aperçu SVG -->
                    <div style="border: 1px solid #ccc; margin: 0;">
                        <svg width="100%"
                             height="200"
                             viewBox="0 0 @currentMur.Longueur @currentMur.Hauteur"
                             preserveAspectRatio="xMidYMid meet"
                             style="display: block; margin: 0;">
                            <!-- Mur de fond -->
                            <rect x="0" y="0"
                                  width="@currentMur.Longueur"
                                  height="@currentMur.Hauteur"
                                  fill="#f8f9fa"
                                  stroke="#ccc"
                                  stroke-width="1" />
                            <!-- Équipements existants avec couleurs selon type -->
                            @foreach (var equip in currentMur.Equipements)
                            {
                                string fillColor = GetEquipementColor(equip.TypeEquipementId);
                                string strokeColor = GetEquipementStrokeColor(equip.TypeEquipementId);

                                <rect x="@equip.PositionX"
                                      y="@equip.PositionY"
                                      width="@equip.Longueur"
                                      height="@equip.Hauteur"
                                      fill="@fillColor"
                                      stroke="@strokeColor" />
                            }
                            <!-- Nouvel équipement en cours -->
                            @if (currentEquipement.Longueur > 0 && currentEquipement.Hauteur > 0)
                            {
                                <rect x="@currentEquipement.PositionX"
                                      y="@currentEquipement.PositionY"
                                      width="@currentEquipement.Longueur"
                                      height="@currentEquipement.Hauteur"
                                      fill="@(IsEquipementOutOfBounds() ? "#dc3545" : GetEquipementColor(currentEquipement.TypeEquipementId))"
                                      fill-opacity="0.5"
                                      stroke="@(IsEquipementOutOfBounds() ? "#dc3545" : GetEquipementStrokeColor(currentEquipement.TypeEquipementId))" />
                            }
                        </svg>
                    </div>
                    <div class="text-center mt-2">
                        <small class="text-muted">
                            Aperçu du positionnement
                            (@(IsEquipementOutOfBounds() ? "rouge : position invalide" : "bleu : position valide"))
                        </small>
                    </div>

                    <div class="modal-body">
                        @if (IsEquipementOutOfBounds())
                        {
                            <div class="alert alert-danger">
                                L'équipement dépasse les dimensions du mur !
                            </div>
                        }
                        <EditForm Model="@currentEquipement" OnValidSubmit="HandleEquipementSubmit">
                            <DataAnnotationsValidator />
                            <ValidationSummary />

                            <div class="mb-3">
                                <label class="form-label">Nom</label>
                                <InputText class="form-control" @bind-Value="currentEquipement.Nom" />
                            </div>
                            <div class="col-md-6 mb-3">
                                <label class="form-label">Type de Equipement</label>
                                <InputSelect class="form-control" @bind-Value="currentEquipement.TypeEquipementId">
                                    <option value="">Sélectionner un type d'équipement</option>
                                    @foreach (var typeEquipement in ViewModel.TypesEquipement)
                                    {
                                        <option value="@typeEquipement.TypeEquipementId">@typeEquipement.Nom</option>
                                    }
                                </InputSelect>
                                <ValidationMessage For="@(() => currentSalle.TypeSalleId)" />
                            </div>
                            <div class="col-md-6 mb-3">
                                <label class="form-label">Position X (m)</label>
                                <InputNumber class="form-control" @bind-Value="currentEquipement.PositionX" />
                            </div>
                            <div class="col-md-6 mb-3">
                                <label class="form-label">Position Y (m)</label>
                                <InputNumber class="form-control" @bind-Value="currentEquipement.PositionY" />
                            </div>
                            <div class="col-md-6 mb-3">
                                <label class="form-label">Longueur</label>
                                <InputNumber class="form-control" @bind-Value="currentEquipement.Longueur" />
                            </div>
                            <div class="col-md-6 mb-3">
                                <label class="form-label">Hauteur</label>
                                <InputNumber class="form-control" @bind-Value="currentEquipement.Hauteur" />
                            </div>


                            <button type="submit" class="btn btn-primary" disabled="@IsEquipementOutOfBounds()">Enregistrer</button>
                            <button type="button" class="btn btn-secondary" @onclick="() => CloseModal()">Annuler</button>
                        </EditForm>
                    </div>
                </div>
            </div>
            </div>
    }

</div>



@code {

    private void AjouterMur()
    {
        if (currentSalle.Murs == null)
            currentSalle.Murs = new List<Mur>();

        currentSalle.Murs.Add(new Mur());
    }

    private void SupprimerMur(Mur mur)
    {
        currentSalle.Murs.Remove(mur);
    }


    private bool showBatimentModal = false;
    private bool showModal = false;
    private bool showModalModif = false;
    private bool showWallModal = false;
    private bool showDeleteConfirmation = false;
    private bool showDeleteBatimentConfirmation = false;
    private bool showCapteurModal = false;
    private bool showEquipementModal = false;
    private bool showTypeSalleModal = false;
    private bool showDeleteTypeSalleConfirmation = false;



    private bool isNewSalle = false;
    private bool isNewBatiment = false;
    private bool isNewCapteur = false;
    private bool isNewEquipement = false;
    private bool isNewTypeSalle = false;


    private Salle currentSalle = new();
    private SalleDTO currentSalleDTO = new();
    private Salle salleToDelete;
    private Mur currentMur;
    private MurCreateParameters murParameters = new();
    private CapteurDTO currentCapteur = new();
    private EquipementDTO currentEquipement = new();
    private TypeSalleDTO currentTypeSalle = new();
    private TypeSalleDTO typeSalleToDelete;
    private SalleDimensions currentDimensions = new();
    private BatimentDTO currentBatiment = new();
    private BatimentDTO batimentToDelete;

        private Mur selectedWall;
        private ElementReference svgElement;
        private bool isDragging;
        private string resizingPoint;
        private double startX, startY;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JS.InvokeVoidAsync("window.scrollTo", 0, 0);
        }
        await base.OnAfterRenderAsync(firstRender);
    }

    public class MurCreateParameters
    {
        public double Longueur { get; set; }
        public double Largeur { get; set; }
        public double Hauteur { get; set; }
    }

    public class SalleDimensions
    {
        public double Longueur { get; set; } // Longueur des murs gauche/droit
        public double Largeur { get; set; }  // Longueur des murs face/entrée
        public double Hauteur { get; set; }  // Hauteur commune à tous les murs
    }

    private string GetEquipementColor(int? typeEquipementId)
    {
        try
        {
            Console.WriteLine($"Debug - TypeEquipementID: {typeEquipementId}");
            Console.WriteLine($"Debug - Nombre de types: {ViewModel.TypesEquipement.Count()}");

            // Vérifie si l'ID est null ou si aucun type n'est trouvé
            var typeEquipement = typeEquipementId.HasValue
                ? ViewModel.TypesEquipement.FirstOrDefault(t => t.TypeEquipementId == typeEquipementId.Value)
                : null;

            if (typeEquipement != null)
            {
                Console.WriteLine($"Debug - Type trouvé: {typeEquipement.Nom}");

                // Retourne une couleur en fonction de l'ID du type d'équipement
                return typeEquipement.TypeEquipementId switch
                {
                    1 => "#FF9800",  // Radiateur - Orange
                    2 => "#2196F3",  // Fenetre - Bleu
                    3 => "#4CE4C1",  // Vitre - Vert
                    4 => "#9C27B0",  // Porte - Violet
                    _ => "#dee2e6"   // Défaut - Gris
                };
            }

            Console.WriteLine($"Debug - Aucun type trouvé pour ID: {typeEquipementId}");
            return "#dee2e6"; // Couleur par défaut si aucun type n'est trouvé
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Debug - Erreur: {ex.Message}");
            return "#dee2e6"; // Couleur par défaut en cas d'erreur
        }
    }


    private int currentWallIndex = 0;
    private Mur currentWall => currentSalle.Murs?.ElementAtOrDefault(currentWallIndex);

    private void NextWall()
    {
        if (currentSalle.Murs != null && currentWallIndex < currentSalle.Murs.Count - 1)
        {
            currentWallIndex++;
            StateHasChanged();
        }
    }

    private void PreviousWall()
    {
        if (currentWallIndex > 0)
        {
            currentWallIndex--;
            StateHasChanged();
        }
    }

    // Modifiez votre méthode EditSalle pour inclure les murs
    private void EditSalle(Salle salle)
    {
        currentSalle = new Salle
            {
                SalleId = salle.SalleId,
                Nom = salle.Nom,
                Surface = salle.Surface,
                TypeSalleId = salle.TypeSalleId,
                BatimentId = salle.BatimentId,
                Murs = salle.Murs?.ToList() ?? new List<Mur>()
            };

        currentWallIndex = 0;
        isNewSalle = false;
        showModalModif = true;
    }

    private string GetEquipementStrokeColor(int? typeEquipementId)
    {
        try
        {
            // Vérifie si l'ID est nul et cherche l'équipement correspondant
            var typeEquipement = typeEquipementId.HasValue
                ? ViewModel.TypesEquipement.FirstOrDefault(t => t.TypeEquipementId == typeEquipementId.Value)
                : null;

            if (typeEquipement != null)
            {
                var nomType = typeEquipement.Nom.ToLower();

                return typeEquipement.TypeEquipementId switch
                {
                    1 => "#E64A19",  // Radiateur - Orange foncé
                    2 => "#1976D2",  // Fenetre - Bleu foncé
                    3 => "#388E3C",  // Vitre - Vert foncé
                    4 => "#7B1FA2",  // Porte - Violet foncé
                    _ => "#adb5bd"   // Défaut - Gris foncé
                };
            }

            return "#adb5bd"; // Couleur par défaut si aucun type n'est trouvé ou si l'ID est nul
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Debug - Erreur dans GetEquipementStrokeColor: {ex.Message}");
            return "#adb5bd"; // Couleur par défaut en cas d'erreur
        }
    }


    protected override async Task OnInitializedAsync()
    {
        await ViewModel.LoadDataAsync();
    }


    private void DeleteSalle(Salle salle)
    {
        salleToDelete = salle;
        showDeleteConfirmation = true;
    }

    private async Task ConfirmDelete()
    {
        if (salleToDelete != null)
        {
            if (await ViewModel.DeleteSalleAsync(salleToDelete.SalleId))
            {
                showDeleteConfirmation = false;
            }
        }
    }

    private void EditWall(Mur mur)
    {
        if (mur != null)
        {
            currentMur = new Mur
                {
                    MurId = mur.MurId,
                    SalleId = mur.SalleId,
                    Nom = mur.Nom,
                    Longueur = mur.Longueur,
                    Hauteur = mur.Hauteur,
                    Orientation = mur.Orientation,
                    Equipements = new List<Equipement>(mur.Equipements ?? new List<Equipement>()),
                    Capteurs = new List<Capteur>(mur.Capteurs ?? new List<Capteur>())
                };
            showWallModal = true;
        }
        else
        {
            currentMur = new Mur
                {
                    Equipements = new List<Equipement>(),
                    Capteurs = new List<Capteur>()
                };
            showWallModal = true;
        }
    }



    private async Task HandleValidSubmit()
    {
        bool success = false;
        try
        {
            if (isNewSalle)
            {
                var createdSalle = await ViewModel.AddSalleAsync(currentSalleDTO);
                if (createdSalle != null)
                {
                    // Créer les murs avec les dimensions spécifiées et l'ID de la salle
                    MurDTO m1 = await ViewModel.AddMurAsync("M1", Models.MurOrientation.Nord, currentDimensions.Largeur, currentDimensions.Hauteur, createdSalle.SalleId);
                    MurDTO m2 = await ViewModel.AddMurAsync("M2", Models.MurOrientation.Ouest, currentDimensions.Longueur, currentDimensions.Hauteur, createdSalle.SalleId);
                    MurDTO m3 = await ViewModel.AddMurAsync("M3", Models.MurOrientation.Sud, currentDimensions.Largeur, currentDimensions.Hauteur, createdSalle.SalleId);
                    MurDTO m4 = await ViewModel.AddMurAsync("M4", Models.MurOrientation.Est, currentDimensions.Longueur, currentDimensions.Hauteur, createdSalle.SalleId);
                    success = true;
                }



            }
            else
            {
                // Mettre à jour les dimensions des murs existants
                var salle = await ViewModel.GetSalleByIdAsync(currentSalle.SalleId);


                success = await ViewModel.UpdateSalleAsync(currentSalleDTO);
            }

            if (success)
            {
                await ViewModel.LoadDataAsync();
                ViewModel.SuccessMessage = isNewSalle ? "La salle a été créée avec succès." : "La salle a été modifiée avec succès.";
                showModal = false;
            }
        }
        catch (Exception ex)
        {
            ViewModel.ErrorMessage = "Une erreur est survenue lors de l'opération : " + ex.Message;
        }
    }

    private void AddNewCapteur()
    {
        currentCapteur = new CapteurDTO { MurId = currentMur.MurId };
        isNewCapteur = true;
        showCapteurModal = true;
    }

    private void EditCapteur(Capteur capteur)
    {
        currentCapteur = new CapteurDTO
            {
                CapteurId = capteur.CapteurId,
                Nom = capteur.Nom,
                PositionX = capteur.PositionX,
                PositionY = capteur.PositionY,
                Hauteur = capteur.Hauteur,
                Longueur = capteur.Longueur,
                MurId = capteur.MurId,
                SalleId = capteur.SalleId,
                DistancePorte = capteur.DistancePorte,
                DistanceChauffage = capteur.DistanceChauffage,
                DistanceFenetre = capteur.DistanceFenetre
            };
        isNewCapteur = false;
        showCapteurModal = true;
    }

    private async Task DeleteCapteur(Capteur capteur)
    {
        if (await ViewModel.DeleteCapteurAsync(capteur.CapteurId))
        {
            currentMur.Capteurs.Remove(capteur);
            ViewModel.SuccessMessage = "Le capteur a été supprimé avec succès.";
            StateHasChanged();
        }
    }

    private async Task RefreshMurData()
    {
        try
        {
            // Recharger complètement les données
            await ViewModel.LoadDataAsync();

            // Chercher le mur mis à jour dans les données rechargées


            StateHasChanged();
        }
        catch (Exception ex)
        {
            ViewModel.ErrorMessage = $"Erreur lors du rafraîchissement des données : {ex.Message}";
        }
    }

    private bool IsCapteurOutOfBounds()
    {
        if (currentCapteur == null || currentMur == null) return true;

        return currentCapteur.PositionX < 0 ||
               currentCapteur.PositionY < 0 ||
               (currentCapteur.PositionX + currentCapteur.Longueur) > currentMur.Longueur ||
               (currentCapteur.PositionY + currentCapteur.Hauteur) > currentMur.Hauteur;
    }

    private async Task HandleCapteurSubmit()
    {
        try
        {
            if (isNewCapteur)
            {
                if (await ViewModel.AddCapteurAsync(currentCapteur))
                {
                    // Ajouter le message de succès
                    ViewModel.SuccessMessage = "Le capteur a été ajouté avec succès.";
                    await RefreshMurData();
                    showCapteurModal = false;
                }
            }
            else
            {
                if (await ViewModel.UpdateCapteurAsync(currentCapteur))
                {
                    // Ajouter le message de succès
                    ViewModel.SuccessMessage = "Le capteur a été modifié avec succès.";
                    await RefreshMurData();
                    showCapteurModal = false;
                }
            }
        }
        catch (Exception ex)
        {
            ViewModel.ErrorMessage = $"Erreur lors de la sauvegarde du capteur : {ex.Message}";
        }
    }

    private void AddNewEquipement()
    {

        currentEquipement = new EquipementDTO { MurId = currentMur.MurId };
        isNewEquipement = true;
        showEquipementModal = true;
    }

    private void EditEquipement(Equipement equipement)
    {
        currentEquipement = new EquipementDTO
            {
                EquipementId = equipement.EquipementId,
                Nom = equipement.Nom,
                PositionX = equipement.PositionX,
                PositionY = equipement.PositionY,
                Hauteur = equipement.Hauteur,
                Longueur = equipement.Longueur,
                MurId = equipement.MurId,
                SalleId = equipement.SalleId,
                TypeEquipementId = equipement.TypeEquipementId,
            };

        isNewEquipement = false;
        showEquipementModal = true;
    }

    private async Task DeleteEquipement(Equipement equipement)
    {
        if (await ViewModel.DeleteEquipementAsync(equipement.EquipementId))
        {
            currentMur.Equipements.Remove(equipement);
            ViewModel.SuccessMessage = "L'équipement a été supprimé avec succès.";
            StateHasChanged();
        }
    }

    private bool IsEquipementOutOfBounds()
    {
        if (currentEquipement == null || currentMur == null) return true;

        return currentEquipement.PositionX < 0 ||
               currentEquipement.PositionY < 0 ||
               (currentEquipement.PositionX + currentEquipement.Longueur) > currentMur.Longueur ||
               (currentEquipement.PositionY + currentEquipement.Hauteur) > currentMur.Hauteur;
    }

    private async Task HandleEquipementSubmit()
    {
        try
        {
            if (isNewEquipement)
            {
                if (await ViewModel.AddEquipementAsync(currentEquipement))
                {
                    // Ajouter le message de succès
                    ViewModel.SuccessMessage = "L'équipement a été ajouté avec succès.";
                    await RefreshMurData();
                    showEquipementModal = false;
                }
            }
            else
            {
                if (await ViewModel.UpdateEquipementAsync(currentEquipement))
                {
                    // Ajouter le message de succès
                    ViewModel.SuccessMessage = "L'équipement a été modifié avec succès.";
                    await RefreshMurData();
                    showEquipementModal = false;
                }
            }
        }
        catch (Exception ex)
        {
            ViewModel.ErrorMessage = $"Erreur lors de la sauvegarde de l'équipement : {ex.Message}";
        }
    }

    private void EditBatiment(BatimentDTO batiment)
    {
        currentBatiment = new BatimentDTO
            {
                BatimentId = batiment.BatimentId,
                Nom = batiment.Nom,
                Adresse = batiment.Adresse
            };
        isNewBatiment = false;
        showBatimentModal = true;

    }

    private void DeleteBatiment(BatimentDTO batiment)
    {
        batimentToDelete = batiment;
        showDeleteConfirmation = true;
    }

    private void EditTypeSalle(TypeSalleDTO typeSalle)
    {
        currentTypeSalle = new TypeSalleDTO
            {
                TypeSalleId = typeSalle.TypeSalleId,
                Nom = typeSalle.Nom,
                Description = typeSalle.Description,
            };
        isNewTypeSalle = false;
        showTypeSalleModal = true;
    }

    private void DeleteTypeSalle(TypeSalleDTO typeSalle)
    {
        typeSalleToDelete = typeSalle;
        showDeleteTypeSalleConfirmation = true;
    }

    private async Task ConfirmDeleteTypeSalle()
    {
        if (typeSalleToDelete != null)
        {
            if (await ViewModel.DeleteTypeSalleAsync(typeSalleToDelete.TypeSalleId))
            {
                showDeleteTypeSalleConfirmation = false;
            }
        }
    }

    private async Task HandleBatimentSubmit()
    {
        bool success;
        if (isNewBatiment)
        {
            success = await ViewModel.AddBatimentAsync(currentBatiment);
        }
        else
        {
            success = await ViewModel.UpdateBatimentAsync(currentBatiment);
            await ViewModel.LoadDataAsync();
        }
        if (success)
        {
            showBatimentModal = false;
        }
    }

    private async Task HandleTypeSalleSubmit()
    {
        bool success;
        if (isNewTypeSalle)
        {
            success = await ViewModel.AddTypeSalleAsync(currentTypeSalle);
        }
        else
        {
            success = await ViewModel.UpdateTypeSalleAsync(currentTypeSalle);
            await ViewModel.LoadDataAsync();
        }
        if (success)
        {
            showTypeSalleModal = false;
        }
    }

    private void CloseModal(string modalType = "all")
    {
        switch (modalType.ToLower())
        {
            case "typesalle":
                showTypeSalleModal = false;
                currentTypeSalle = new();
                break;

            case "salle":
                showModal = false;
                currentSalleDTO = new();
                break;

            case "sallemodif":
                showModalModif = false;
                currentSalle = new();
                break;

            case "wall":
                showWallModal = false;
                currentMur = null;
                break;

            case "capteur":
                showCapteurModal = false;
                currentCapteur = new();
                break;

            case "equipement":
                showEquipementModal = false;
                currentEquipement = new();
                break;

            case "all":
            default:
                // Ferme toutes les modales et réinitialise tous les états
                showTypeSalleModal = false;
                showModal = false;
                showModalModif = false;
                showWallModal = false;
                showCapteurModal = false;
                showEquipementModal = false;

                currentTypeSalle = new();
                currentSalleDTO = new();
                currentSalle = new();
                currentMur = null;
                currentCapteur = new();
                currentEquipement = new();
                break;
        }
    }
}