@page "/salles"
@using SAE_CLIENTGestion.Models
@using SAE_CLIENTGestion.Models.DTO
@using SAE_CLIENTGestion.ViewModels
<link href="css/salles.css" rel="stylesheet" />
@inject IJSRuntime JS
@inject SallesViewModel ViewModel

<PageTitle>Gestion des Salles</PageTitle>

<div class="container-fluid main-content overflow-auto">
    @if (!string.IsNullOrEmpty(ViewModel.SuccessMessage))
    {
        <div class="alert alert-success alert-dismissible fade show custom-alert" role="alert">
            @ViewModel.SuccessMessage
            <button type="button" class="btn-close" @onclick="() => ViewModel.SuccessMessage = null"></button>
        </div>
    }

    @if (!string.IsNullOrEmpty(ViewModel.ErrorMessage))
    {
        <div class="alert alert-danger alert-dismissible fade show custom-alert" role="alert">
            @ViewModel.ErrorMessage
            <button type="button" class="btn-close" @onclick="() => ViewModel.ErrorMessage = null"></button>
        </div>
    }

    <!-- Section Types de Salle -->
    <div class="mb-5">
        <div class="d-flex justify-content-between align-items-center mb-4">
            <h3>Types de Salle</h3>
            <button class="btn btn-primary" @onclick="() => { currentTypeSalle = new(); showTypeSalleModal = true; isNewTypeSalle = true; }">
                <i class="fas fa-plus"></i> Nouveau Type de Salle
            </button>
        </div>

        @if (ViewModel.IsLoading)
        {
            <div class="d-flex justify-content-center">
                <div class="spinner-border" role="status">
                    <span class="visually-hidden">Chargement...</span>
                </div>
            </div>
        }
        else if (!ViewModel.TypesSalle.Any())
        {
            <div class="alert alert-info">Aucun type de salle n'a été créé.</div>
        }
        else
        {
            <div class="table-responsive">
                <table class="table table-hover">
                    <thead>
                        <tr>
                            <th>Nom</th>
                            <th>Description</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var typeSalle in ViewModel.TypesSalle)
                        {
                            <tr>
                                <td>@typeSalle.Nom</td>
                                <td>@typeSalle.Description</td>
                                <td>
                                    <button class="btn btn-warning btn-sm me-2" @onclick="() => EditTypeSalle(typeSalle)">
                                        <i class="bi bi-pencil-square"></i>
                                    </button>
                                    <button class="btn btn-danger btn-sm" @onclick="() => DeleteTypeSalle(typeSalle)">
                                        <i class="bi bi-trash"></i>
                                    </button>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        }
    </div>

    <!-- Modal pour Ajout/Modification de Type de Salle -->
    @if (showTypeSalleModal)
    {
        <div class="modal fade show" style="display: block;" tabindex="-1">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">@(isNewTypeSalle ? "Nouveau Type de Salle" : "Modifier le Type de Salle")</h5>
                        <button type="button" class="btn-close" @onclick="CloseTypeSalleModal"></button>
                    </div>
                    <div class="modal-body">
                        <EditForm Model="@currentTypeSalle" OnValidSubmit="HandleTypeSalleSubmit">
                            <DataAnnotationsValidator />
                            <ValidationSummary />

                            <div class="mb-3">
                                <label class="form-label">Nom</label>
                                <InputText class="form-control" @bind-Value="currentTypeSalle.Nom" />
                                <ValidationMessage For="@(() => currentTypeSalle.Nom)" />
                            </div>

                            <div class="mb-3">
                                <label class="form-label">Description</label>
                                <InputText class="form-control" @bind-Value="currentTypeSalle.Description" />
                                <ValidationMessage For="@(() => currentTypeSalle.Description)" />
                            </div>

                            <div class="mt-4">
                                <button type="submit" class="btn btn-primary me-2">Enregistrer</button>
                                <button type="button" class="btn btn-secondary" @onclick="CloseTypeSalleModal">Annuler</button>
                            </div>
                        </EditForm>
                    </div>
                </div>
            </div>
        </div>
        <div class="modal-backdrop fade show"></div>
    }

    <!-- Modal de confirmation pour la suppression de Type de Salle -->
    @if (showDeleteTypeSalleConfirmation)
    {
        <div class="modal fade show" style="display: block;" tabindex="-1">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">Confirmer la suppression</h5>
                        <button type="button" class="btn-close" @onclick="() => showDeleteTypeSalleConfirmation = false"></button>
                    </div>
                    <div class="modal-body">
                        <p>Êtes-vous sûr de vouloir supprimer ce type de salle ?</p>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" @onclick="() => showDeleteTypeSalleConfirmation = false">Annuler</button>
                        <button type="button" class="btn btn-danger" @onclick="ConfirmDeleteTypeSalle">Supprimer</button>
                    </div>
                </div>
            </div>
        </div>
        <div class="modal-backdrop fade show"></div>
    }

    <!-- Section existante pour les Salles -->
    <div class="d-flex justify-content-between align-items-center mb-4">
        <h2>Gestion des Salles</h2>
        <button class="btn btn-primary" @onclick="() => { currentSalle = new(); showModal = true; isNewSalle = true; }">
            <i class="fas fa-plus"></i> Nouvelle Salle
        </button>
    </div>

    @if (ViewModel.IsLoading)
    {
        <div class="d-flex justify-content-center">
            <div class="spinner-border" role="status">
                <span class="visually-hidden">Chargement...</span>
            </div>
        </div>
    }
    else if (ViewModel.Salles.Count == 0)
    {
        <div class="alert alert-info">Aucune salle n'a été créée.</div>
    }
    else
    {
        <div class="row">
            @foreach (var salle in ViewModel.Salles)
            {
                <div class="col">
                    <div class="card h-100">
                        <div class="card-header d-flex justify-content-between align-items-center">
                            <h5 class="mb-0">@salle.Nom</h5>
                            <div>
                                <button class="btn btn-warning btn-sm me-2" @onclick="() => EditSalle(salle)">
                                    <i class="bi bi-pencil-square"></i>
                                </button>
                                <button class="btn btn-danger btn-sm" @onclick="() => DeleteSalle(salle)">
                                    <i class="bi bi-trash"></i>
                                </button>
                            </div>
                        </div>
                        <div class="card-body">
                            <div class="mb-3">
                                <strong>Surface:</strong> @salle.Surface m²<br>
                                <strong>Bâtiment:</strong> @salle.Batiment.Nom<br>
                                <strong>Type:</strong> @salle.TypeSalle.Nom
                            </div>

                            <div class="room-walls-container">
                                <!-- Visualisation schématique de la salle -->
                                <div class="room-layout">
                                    <!-- Mur du Haut (Face) -->
                                    <div class="wall wall-top" @onclick="() => EditWall(salle.MurFace)">
                                        <span class="wall-label">Mur Face</span>
                                        @if (salle.MurFace != null)
                                        {
                                            <div class="wall-info">
                                                <small class="wall-name">@salle.MurFace.Nom</small>
                                                <small class="wall-dimensions">
                                                    L: @salle.MurFace.Longueur m × H: @salle.MurFace.Hauteur m
                                                </small>
                                                <small class="wall-details">
                                                    @salle.MurFace.Equipements?.Count équipements
                                                    @salle.MurFace.Capteurs?.Count capteurs
                                                </small>
                                            </div>
                                        }
                                        else
                                        {
                                            <small class="text-muted">Non défini</small>
                                        }
                                    </div>

                                    <div class="wall-middle-container">
                                        <!-- Mur Gauche -->
                                        <div class="wall wall-left" @onclick="() => EditWall(salle.MurGauche)">
                                            <span class="wall-label">Mur Gauche</span>
                                            @if (salle.MurGauche != null)
                                            {
                                                <div class="wall-info">
                                                    <small class="wall-name">@salle.MurGauche.Nom</small>
                                                    <small class="wall-dimensions">
                                                        L: @salle.MurGauche.Longueur m × H: @salle.MurGauche.Hauteur m
                                                    </small>
                                                    <small class="wall-details">
                                                        @salle.MurGauche.Equipements?.Count équipements
                                                        @salle.MurGauche.Capteurs?.Count capteurs
                                                    </small>
                                                </div>
                                            }
                                            else
                                            {
                                                <small class="text-muted">Non défini</small>
                                            }
                                        </div>

                                        <!-- Zone centrale -->
                                        <div class="room-center">
                                            <span>@salle.Nom</span>
                                        </div>

                                        <!-- Mur Droit -->
                                        <div class="wall wall-right" @onclick="() => EditWall(salle.MurDroite)">
                                            <span class="wall-label">Mur Droit</span>
                                            @if (salle.MurDroite != null)
                                            {
                                                <div class="wall-info">
                                                    <small class="wall-name">@salle.MurDroite.Nom</small>
                                                    <small class="wall-dimensions">
                                                        L: @salle.MurDroite.Longueur m × H: @salle.MurDroite.Hauteur m
                                                    </small>
                                                    <small class="wall-details">
                                                        @salle.MurDroite.Equipements?.Count équipements
                                                        @salle.MurDroite.Capteurs?.Count capteurs
                                                    </small>
                                                </div>
                                            }
                                            else
                                            {
                                                <small class="text-muted">Non défini</small>
                                            }
                                        </div>
                                    </div>

                                    <!-- Mur du Bas (Entrée) -->
                                    <div class="wall wall-bottom" @onclick="() => EditWall(salle.MurEntree)">
                                        <span class="wall-label">Mur Entrée</span>
                                        @if (salle.MurEntree != null)
                                        {
                                            <div class="wall-info">
                                                <small class="wall-name">@salle.MurEntree.Nom</small>
                                                <small class="wall-dimensions">
                                                    L: @salle.MurEntree.Longueur m × H: @salle.MurEntree.Hauteur m
                                                </small>
                                                <small class="wall-details">
                                                    @salle.MurEntree.Equipements?.Count équipements
                                                    @salle.MurEntree.Capteurs?.Count capteurs
                                                </small>
                                            </div>
                                        }
                                        else
                                        {
                                            <small class="text-muted">Non défini</small>
                                        }
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            }
        </div>
    }

    <!-- Modal pour Ajout/Modification de Salle -->
    @if (showModal)
    {
        <div class="modal fade show" style="display: block;" tabindex="-1">
            <div class="modal-dialog modal-lg">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">@(isNewSalle ? "Nouvelle Salle" : "Modifier la Salle")</h5>
                        <button type="button" class="btn-close" @onclick="CloseModal"></button>
                    </div>
                    <div class="modal-body">
                        <EditForm Model="@currentSalle" OnValidSubmit="HandleValidSubmit">
                            <DataAnnotationsValidator />
                            <ValidationSummary />
                            <div>
                                <div class="col-md-6 mb-3">
                                    <label class="form-label">Nom</label>
                                    <InputText class="form-control" @bind-Value="currentSalle.Nom" />
                                    <ValidationMessage For="@(() => currentSalle.Nom)" />
                                </div>

                                <div class="col-md-6 mb-3">
                                    <label class="form-label">Surface (m²)</label>
                                    <InputNumber class="form-control" @bind-Value="currentSalle.Surface" />
                                    <ValidationMessage For="@(() => currentSalle.Surface)" />
                                </div>

                                <div class="col-md-6 mb-3">
                                    <label class="form-label">Bâtiment</label>
                                    <InputSelect class="form-control" @bind-Value="currentSalle.BatimentId">
                                        <option value="">Sélectionner un bâtiment</option>
                                        @foreach (var batiment in ViewModel.Batiments)
                                        {
                                            <option value="@batiment.BatimentId">@batiment.Nom</option>
                                        }
                                    </InputSelect>
                                    <ValidationMessage For="@(() => currentSalle.BatimentId)" />
                                </div>

                                <div class="col-md-6 mb-3">
                                    <label class="form-label">Type de Salle</label>
                                    <InputSelect class="form-control" @bind-Value="currentSalle.TypeSalleId">
                                        <option value="">Sélectionner un type de salle</option>
                                        @foreach (var typeSalle in ViewModel.TypesSalle)
                                        {
                                            <option value="@typeSalle.TypeSalleId">@typeSalle.Nom</option>
                                        }
                                    </InputSelect>
                                    <ValidationMessage For="@(() => currentSalle.TypeSalleId)" />
                                </div>
                            </div>
                            <div class="card mt-3">
                                <div class="card-header">
                                    Dimensions de la salle
                                </div>
                                <div class="card-body">
                                    <div>
                                        <div class="col-md-4 mb-3">
                                            <label class="form-label">Longueur (m)</label>
                                            <InputNumber class="form-control" @bind-Value="currentDimensions.Longueur" />
                                        </div>
                                        <div class="col-md-4 mb-3">
                                            <label class="form-label">Largeur (m)</label>
                                            <InputNumber class="form-control" @bind-Value="currentDimensions.Largeur" />
                                        </div>
                                        <div class="col-md-4 mb-3">
                                            <label class="form-label">Hauteur (m)</label>
                                            <InputNumber class="form-control" @bind-Value="currentDimensions.Hauteur" />
                                        </div>
                                    </div>
                                    <small class="text-muted">La modification des dimensions mettra à jour tous les murs de la salle.</small>
                                </div>
                            </div>
                            <div class="mt-4">
                                <button type="submit" class="btn btn-primary me-2">Enregistrer</button>
                                <button type="button" class="btn btn-secondary" @onclick="CloseModal">Annuler</button>
                            </div>
                        </EditForm>
                    </div>
                </div>
            </div>
        </div>
        <div class="modal-backdrop fade show"></div>
    }

    <!-- Modal de confirmation pour la suppression -->
    @if (showDeleteConfirmation)
    {
        <div class="modal fade show" style="display: block;" tabindex="-1">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">Confirmer la suppression</h5>
                        <button type="button" class="btn-close" @onclick="() => showDeleteConfirmation = false"></button>
                    </div>
                    <div class="modal-body">
                        <p>Êtes-vous sûr de vouloir supprimer cette salle ?</p>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" @onclick="() => showDeleteConfirmation = false">Annuler</button>
                        <button type="button" class="btn btn-danger" @onclick="ConfirmDelete">Supprimer</button>
                    </div>
                </div>
            </div>
        </div>
        <div class="modal-backdrop fade show"></div>
    }

    <!-- Modal pour l'édition/ajout de mur' -->
    @if (showWallModal)
    {
        <div class="modal fade show" style="display: block;" tabindex="-1">
            <div class="modal-dialog modal-lg">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">Modifier le Mur</h5>
                        <button type="button" class="btn-close" @onclick="CloseWallModal"></button>
                    </div>
                    <div class="modal-body">
                        <div class="accordion" id="wallAccordion">

                            <!-- Gestion des Capteurs -->
                            <div class="accordion-item">
                                <h2 class="accordion-header">
                                    <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#capteurs">
                                        Capteurs (@(currentMur.Capteurs?.Count ?? 0))
                                    </button>
                                </h2>
                                <div id="capteurs" class="accordion-collapse collapse">
                                    <div class="accordion-body">
                                        <div class="d-flex justify-content-between mb-3">
                                            <h6>Liste des capteurs</h6>
                                            <button class="btn btn-sm btn-primary" @onclick="() => AddNewCapteur()">
                                                <i class="fas fa-plus"></i> Ajouter un capteur
                                            </button>
                                        </div>

                                        @if (currentMur.Capteurs?.Any() != true)
                                        {
                                            <div class="alert alert-info">Aucun capteur installé sur ce mur.</div>
                                        }
                                        else
                                        {
                                            <div class="list-group">
                                                @foreach (var capteur in currentMur.Capteurs)
                                                {
                                                    <div class="list-group-item">
                                                        <div class="d-flex justify-content-between align-items-center">
                                                            <div>
                                                                <h6 class="mb-1">@capteur.Nom</h6>
                                                                <small>Position: X:@capteur.PositionX m, Y:@capteur.PositionY m</small>
                                                            </div>
                                                            <div>
                                                                <button class="btn btn-sm btn-warning me-2" @onclick="() => EditCapteur(capteur)">
                                                                    <i class="bi bi-pencil"></i>
                                                                </button>
                                                                <button class="btn btn-sm btn-danger" @onclick="() => DeleteCapteur(capteur)">
                                                                    <i class="bi bi-trash"></i>
                                                                </button>
                                                            </div>
                                                        </div>
                                                    </div>
                                                }
                                            </div>
                                        }
                                    </div>
                                </div>
                            </div>

                            <!-- Gestion des Équipements -->
                            <div class="accordion-item">
                                <h2 class="accordion-header">
                                    <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#equipements">
                                        Équipements (@(currentMur.Equipements?.Count ?? 0))
                                    </button>
                                </h2>
                                <div id="equipements" class="accordion-collapse collapse">
                                    <div class="accordion-body">
                                        <div class="d-flex justify-content-between mb-3">
                                            <h6>Liste des équipements</h6>
                                            <button class="btn btn-sm btn-primary" @onclick="() => AddNewEquipement()">
                                                <i class="fas fa-plus"></i> Ajouter un équipement
                                            </button>
                                        </div>

                                        @if (currentMur.Equipements?.Any() != true)
                                        {
                                            <div class="alert alert-info">Aucun équipement installé sur ce mur.</div>
                                        }
                                        else
                                        {
                                            <div class="list-group">
                                                @foreach (var equipement in currentMur.Equipements)
                                                {
                                                    <div class="list-group-item">
                                                        <div class="d-flex justify-content-between align-items-center">
                                                            <div>
                                                                <h6 class="mb-1">@equipement.Nom</h6>
                                                                <small>Position: X:@equipement.PositionX m, Y:@equipement.PositionY m</small>
                                                            </div>
                                                            <div>
                                                                <button class="btn btn-sm btn-warning me-2" @onclick="() => EditEquipement(equipement)">
                                                                    <i class="bi bi-pencil"></i>
                                                                </button>
                                                                <button class="btn btn-sm btn-danger" @onclick="() => DeleteEquipement(equipement)">
                                                                    <i class="bi bi-trash"></i>
                                                                </button>
                                                            </div>
                                                        </div>
                                                    </div>
                                                }
                                            </div>
                                        }
                                    </div>
                                </div>
                            </div>
                        </div>

                        <div class="modal-footer">
                            <button type="button" class="btn btn-secondary" @onclick="CloseWallModal">Fermer</button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="modal-backdrop fade show"></div>
    }

    <!-- Modal pour l'édition/ajout de capteur -->
    @if (showCapteurModal)
    {
        <div class="modal fade show" style="display: block;" tabindex="-1">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">@(isNewCapteur ? "Nouveau capteur" : "Modifier le capteur")</h5>
                        <button type="button" class="btn-close" @onclick="CloseCapteurModal"></button>
                    </div>
                    <div class="modal-body">
                        <EditForm Model="@currentCapteur" OnValidSubmit="HandleCapteurSubmit">
                            <DataAnnotationsValidator />
                            <ValidationSummary />

                            <div class="mb-3">
                                <label class="form-label">Nom</label>
                                <InputText class="form-control" @bind-Value="currentCapteur.Nom" />
                            </div>


                            <div class="row">
                                <div class="col-md-6 mb-3">
                                    <label class="form-label">Position X (m)</label>
                                    <InputNumber class="form-control" @bind-Value="currentCapteur.PositionX" />
                                </div>
                                <div class="col-md-6 mb-3">
                                    <label class="form-label">Position Y (m)</label>
                                    <InputNumber class="form-control" @bind-Value="currentCapteur.PositionY" />
                                </div>
                                <div class="col-md-6 mb-3">
                                    <label class="form-label">Longueur</label>
                                    <InputNumber class="form-control" @bind-Value="currentCapteur.Longeur" />
                                </div>
                                <div class="col-md-6 mb-3">
                                    <label class="form-label">Hauteur</label>
                                    <InputNumber class="form-control" @bind-Value="currentCapteur.Hauteur" />
                                </div>
                            </div>

                            <button type="submit" class="btn btn-primary">Enregistrer</button>
                            <button type="button" class="btn btn-secondary" @onclick="CloseCapteurModal">Annuler</button>
                        </EditForm>
                    </div>
                </div>
            </div>
        </div>
        <div class="modal-backdrop fade show"></div>
    }

    <!-- Modal pour l'édition/ajout d'équipement -->
    @if (showEquipementModal)
    {
        <div class="modal fade show" style="display: block;" tabindex="-1">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">@(isNewEquipement ? "Nouvel équipement" : "Modifier l'équipement")</h5>
                        <button type="button" class="btn-close" @onclick="CloseEquipementModal"></button>
                    </div>
                    <div class="modal-body">
                        <EditForm Model="@currentEquipement" OnValidSubmit="HandleEquipementSubmit">
                            <DataAnnotationsValidator />
                            <ValidationSummary />

                            <div class="mb-3">
                                <label class="form-label">Nom</label>
                                <InputText class="form-control" @bind-Value="currentEquipement.Nom" />
                            </div>

                            <div class="row">
                                <div class="col-md-6 mb-3">
                                    <label class="form-label">Position X (m)</label>
                                    <InputNumber class="form-control" @bind-Value="currentEquipement.PositionX" />
                                </div>
                                <div class="col-md-6 mb-3">
                                    <label class="form-label">Position Y (m)</label>
                                    <InputNumber class="form-control" @bind-Value="currentEquipement.PositionY" />
                                </div>
                                <div class="col-md-6 mb-3">
                                    <label class="form-label">Longueur</label>
                                    <InputNumber class="form-control" @bind-Value="currentEquipement.Longueur" />
                                </div>
                                <div class="col-md-6 mb-3">
                                    <label class="form-label">Hauteur</label>
                                    <InputNumber class="form-control" @bind-Value="currentEquipement.Hauteur" />
                                </div>
                            </div>

                            <button type="submit" class="btn btn-primary">Enregistrer</button>
                            <button type="button" class="btn btn-secondary" @onclick="CloseEquipementModal">Annuler</button>
                        </EditForm>
                    </div>
                </div>
            </div>
        </div>
        <div class="modal-backdrop fade show"></div>
    }

</div>



@code {
    private bool showModal = false;
    private bool showWallModal = false;
    private bool showDeleteConfirmation = false;
    private bool showCapteurModal = false;
    private bool showEquipementModal = false;
    private bool showTypeSalleModal = false;
    private bool showDeleteTypeSalleConfirmation = false;



    private bool isNewSalle = false;
    private bool isNewCapteur = false;
    private bool isNewEquipement = false;
    private bool isNewTypeSalle = false;


    private SalleDTO currentSalle = new();
    private Salle salleToDelete;
    private Mur currentMur;
    private MurCreateParameters murParameters = new();
    private Capteur currentCapteur = new();
    private Equipement currentEquipement = new();
    private TypeSalleDTO currentTypeSalle = new();
    private TypeSalleDTO typeSalleToDelete;
    private SalleDimensions currentDimensions = new();

    public class MurCreateParameters
    {
        public double Longueur { get; set; }
        public double Largeur { get; set; }
        public double Hauteur { get; set; }
    }

    public class SalleDimensions
    {
        public double Longueur { get; set; } // Longueur des murs gauche/droit
        public double Largeur { get; set; }  // Longueur des murs face/entrée
        public double Hauteur { get; set; }  // Hauteur commune à tous les murs
    }

    protected override async Task OnInitializedAsync()
    {
        await ViewModel.LoadDataAsync();
    }

    private void EditSalle(Salle salle)
    {
        currentSalle = new SalleDTO
            {
                SalleId = salle.SalleId,
                Nom = salle.Nom,
                Surface = salle.Surface,
                TypeSalleId = salle.TypeSalleId,
                BatimentId = salle.BatimentId,
            };

        // Initialiser les dimensions depuis les murs existants
        currentDimensions = new SalleDimensions
            {
                Longueur = salle.MurDroite?.Longueur ?? 0,
                Largeur = salle.MurFace?.Longueur ?? 0,
                Hauteur = salle.MurFace?.Hauteur ?? 0
            };

        isNewSalle = false;
        showModal = true;
    }

    private void DeleteSalle(Salle salle)
    {
        salleToDelete = salle;
        showDeleteConfirmation = true;
    }

    private async Task ConfirmDelete()
    {
        if (salleToDelete != null)
        {
            if (await ViewModel.DeleteSalleAsync(salleToDelete.SalleId))
            {
                showDeleteConfirmation = false;
            }
        }
    }

    private void EditWall(Mur mur)
    {
        if (mur != null)
        {
            currentMur = new Mur
                {
                    MurId = mur.MurId,
                    Nom = mur.Nom,
                    Longueur = mur.Longueur,
                    Hauteur = mur.Hauteur,
                    Type = mur.Type,
                    Equipements = new List<Equipement>(mur.Equipements ?? new List<Equipement>()),
                    Capteurs = new List<Capteur>(mur.Capteurs ?? new List<Capteur>())
                };
            showWallModal = true;
        }
        else
        {
            currentMur = new Mur
                {
                    Equipements = new List<Equipement>(),
                    Capteurs = new List<Capteur>()
                };
            showWallModal = true;
        }
    }

    private async Task HandleValidSubmit()
    {
        bool success;
        try
        {
            if (isNewSalle)
            {
                // Créer les murs avec les dimensions spécifiées
                Mur murface = await ViewModel.AddMurAsync("Mur Face", TypeMur.Face, currentDimensions.Largeur, currentDimensions.Hauteur);
                Mur murentree = await ViewModel.AddMurAsync("Mur Entree", TypeMur.Entree, currentDimensions.Largeur, currentDimensions.Hauteur);
                Mur murdroite = await ViewModel.AddMurAsync("Mur Droite", TypeMur.Droite, currentDimensions.Longueur, currentDimensions.Hauteur);
                Mur murgauche = await ViewModel.AddMurAsync("Mur Gauche", TypeMur.Gauche, currentDimensions.Longueur, currentDimensions.Hauteur);

                currentSalle.MurFaceId = murface.MurId;
                currentSalle.MurEntreeId = murentree.MurId;
                currentSalle.MurDroiteId = murdroite.MurId;
                currentSalle.MurGaucheId = murgauche.MurId;

                success = await ViewModel.AddSalleAsync(currentSalle);
            }
            else
            {
                // Mettre à jour les dimensions des murs existants
                var salle = await ViewModel.GetSalleByIdAsync(currentSalle.SalleId);
                if (salle != null)
                {
                    if (salle.MurFace != null)
                    {
                        salle.MurFace.Longueur = currentDimensions.Largeur;
                        salle.MurFace.Hauteur = currentDimensions.Hauteur;
                        await ViewModel.UpdateMurAsync(salle.MurFace);
                    }
                    if (salle.MurEntree != null)
                    {
                        salle.MurEntree.Longueur = currentDimensions.Largeur;
                        salle.MurEntree.Hauteur = currentDimensions.Hauteur;
                        await ViewModel.UpdateMurAsync(salle.MurEntree);
                    }
                    if (salle.MurDroite != null)
                    {
                        salle.MurDroite.Longueur = currentDimensions.Longueur;
                        salle.MurDroite.Hauteur = currentDimensions.Hauteur;
                        await ViewModel.UpdateMurAsync(salle.MurDroite);
                    }
                    if (salle.MurGauche != null)
                    {
                        salle.MurGauche.Longueur = currentDimensions.Longueur;
                        salle.MurGauche.Hauteur = currentDimensions.Hauteur;
                        await ViewModel.UpdateMurAsync(salle.MurGauche);
                    }
                }

                success = await ViewModel.UpdateSalleAsync(currentSalle);
            }

            if (success)
            {
                await ViewModel.LoadDataAsync();
                ViewModel.SuccessMessage = isNewSalle ? "La salle a été créée avec succès." : "La salle a été modifiée avec succès.";
                showModal = false;
            }
        }
        catch (Exception ex)
        {
            ViewModel.ErrorMessage = "Une erreur est survenue lors de l'opération : " + ex.Message;
        }
    }

    private async Task HandleWallSubmit()
    {
        if (currentMur != null)
        {
            await ViewModel.UpdateMurAsync(currentMur);
            await ViewModel.LoadDataAsync(); // Recharger les données
            showWallModal = false;
        }
    }

    private void AddNewCapteur()
    {
        currentCapteur = new Capteur { MurId = currentMur.MurId };
        isNewCapteur = true;
        showCapteurModal = true;
    }

    private void EditCapteur(Capteur capteur)
    {
        currentCapteur = new Capteur
            {
                CapteurId = capteur.CapteurId,
                Nom = capteur.Nom,
                PositionX = capteur.PositionX,
                PositionY = capteur.PositionY,
                Hauteur = capteur.Hauteur,
                Longeur = capteur.Longeur,
                MurId = capteur.MurId
            };
        isNewCapteur = false;
        showCapteurModal = true;
    }

    private async Task DeleteCapteur(Capteur capteur)
    {
        if (await ViewModel.DeleteCapteurAsync(capteur.CapteurId))
        {
            currentMur.Capteurs.Remove(capteur);
            StateHasChanged();
        }
    }

    private async Task HandleCapteurSubmit()
    {
        if (isNewCapteur)
        {
            if (await ViewModel.AddCapteurAsync(currentCapteur))
            {
                currentMur.Capteurs.Add(currentCapteur);
                showCapteurModal = false;
            }
        }
        else
        {
            if (await ViewModel.UpdateCapteurAsync(currentCapteur))
            {
                var index = currentMur.Capteurs.FindIndex(c => c.CapteurId == currentCapteur.CapteurId);
                if (index != -1)
                {
                    currentMur.Capteurs[index] = currentCapteur;
                }
                showCapteurModal = false;
            }
        }
    }

    private void AddNewEquipement()
    {
        currentEquipement = new Equipement { MurId = currentMur.MurId };
        isNewEquipement = true;
        showEquipementModal = true;
    }

    private void EditEquipement(Equipement equipement)
    {
        currentEquipement = new Equipement
            {
                EquipementId = equipement.EquipementId,
                Nom = equipement.Nom,
                PositionX = equipement.PositionX,
                PositionY = equipement.PositionY,
                Hauteur = equipement.Hauteur,
                Longueur = equipement.Longueur,
                MurId = equipement.MurId,
                SalleId = equipement.SalleId,
                TypeEquipementId = equipement.TypeEquipementId,
            };
        isNewEquipement = false;
        showEquipementModal = true;
    }

    private async Task DeleteEquipement(Equipement equipement)
    {
        if (await ViewModel.DeleteEquipementAsync(equipement.EquipementId))
        {
            currentMur.Equipements.Remove(equipement);
            StateHasChanged();
        }
    }

    private async Task HandleEquipementSubmit()
    {
        if (isNewEquipement)
        {
            if (await ViewModel.AddEquipementAsync(currentEquipement))
            {
                currentMur.Equipements.Add(currentEquipement);
                showEquipementModal = false;
            }
        }
        else
        {
            if (await ViewModel.UpdateEquipementAsync(currentEquipement))
            {
                var index = currentMur.Equipements.FindIndex(e => e.EquipementId == currentEquipement.EquipementId);
                if (index != -1)
                {
                    currentMur.Equipements[index] = currentEquipement;
                }
                showEquipementModal = false;
            }
        }
    }

    private void EditTypeSalle(TypeSalleDTO typeSalle)
    {
        currentTypeSalle = new TypeSalleDTO
            {
                TypeSalleId = typeSalle.TypeSalleId,
                Nom = typeSalle.Nom,
                Description = typeSalle.Description,
            };
        isNewTypeSalle = false;
        showTypeSalleModal = true;
    }

    private void DeleteTypeSalle(TypeSalleDTO typeSalle)
    {
        typeSalleToDelete = typeSalle;
        showDeleteTypeSalleConfirmation = true;
    }

    private async Task ConfirmDeleteTypeSalle()
    {
        if (typeSalleToDelete != null)
        {
            if (await ViewModel.DeleteTypeSalleAsync(typeSalleToDelete.TypeSalleId))
            {
                showDeleteTypeSalleConfirmation = false;
            }
        }
    }

    private async Task HandleTypeSalleSubmit()
    {
        bool success;
        if (isNewTypeSalle)
        {
            success = await ViewModel.AddTypeSalleAsync(currentTypeSalle);
        }
        else
        {
            success = await ViewModel.UpdateTypeSalleAsync(currentTypeSalle);
        }
        if (success)
        {
            showTypeSalleModal = false;
        }
    }

    private void CloseTypeSalleModal()
    {
        showTypeSalleModal = false;
        currentTypeSalle = new();
    }

    private void CloseModal()
    {
        showModal = false;
        showWallModal = false;
        currentSalle = new();
    }

    private void CloseWallModal()
    {
        showWallModal = false;
        currentMur = null;
    }

    private void CloseCapteurModal()
    {
        showCapteurModal = false;
        currentCapteur = new();
    }

    private void CloseEquipementModal()
    {
        showEquipementModal = false;
        currentEquipement = new();
    }
}