@page "/salles"
@using SAE_CLIENTGestion.Models
@using SAE_CLIENTGestion.ViewModels
@inject SallesViewModel ViewModel

<PageTitle>Gestion des Salles</PageTitle>

<div class="container-fluid">
    @if (!string.IsNullOrEmpty(ViewModel.SuccessMessage))
    {
        <div class="alert alert-success alert-dismissible fade show" role="alert">
            @ViewModel.SuccessMessage
            <button type="button" class="btn-close" @onclick="() => ViewModel.SuccessMessage = null"></button>
        </div>
    }

    @if (!string.IsNullOrEmpty(ViewModel.ErrorMessage))
    {
        <div class="alert alert-danger alert-dismissible fade show" role="alert">
            @ViewModel.ErrorMessage
            <button type="button" class="btn-close" @onclick="() => ViewModel.ErrorMessage = null"></button>
        </div>
    }

    <div class="d-flex justify-content-between align-items-center mb-4">
        <h2>Gestion des Salles</h2>
        <button class="btn btn-primary" @onclick="() => { currentSalle = new(); showModal = true; isNewSalle = true; }">
            <i class="fas fa-plus"></i> Nouvelle Salle
        </button>
    </div>

    @if (ViewModel.IsLoading)
    {
        <div class="d-flex justify-content-center">
            <div class="spinner-border" role="status">
                <span class="visually-hidden">Chargement...</span>
            </div>
        </div>
    }
    else if (ViewModel.Salles.Count == 0)
    {
        <div class="alert alert-info">Aucune salle n'a été créée.</div>
    }
    else
    {
        <div class="row row-cols-1 row-cols-md-2 row-cols-xl-3 g-4">
            @foreach (var salle in ViewModel.Salles)
            {
                <div class="col">
                    <div class="card h-100">
                        <div class="card-header d-flex justify-content-between align-items-center">
                            <h5 class="mb-0">@salle.Nom</h5>
                            <div>
                                <button class="btn btn-warning btn-sm me-2" @onclick="() => EditSalle(salle)">
                                    <i class="bi bi-pencil-square"></i>
                                </button>
                                <button class="btn btn-danger btn-sm" @onclick="() => DeleteSalle(salle)">
                                    <i class="bi bi-trash"></i>
                                </button>
                            </div>
                        </div>
                        <div class="card-body">
                            <div class="mb-3">
                                <strong>Surface:</strong> @salle.Surface m²<br>
                                <strong>Bâtiment:</strong> @salle.Batiment.Nom<br>
                                <strong>Type:</strong> @salle.TypeSalleId
                            </div>

                            <div class="room-walls-container">
                                <!-- Visualisation schématique de la salle -->
                                <div class="room-layout">
                                    <!-- Mur du Haut (Face) -->
                                    <div class="wall wall-top" @onclick="() => EditWall(salle.MurFace)">
                                        <span class="wall-label">Mur Face</span>
                                        @if (salle.MurFace != null)
                                        {
                                            <div class="wall-info">
                                                <small class="wall-name">@salle.MurFace.Nom</small>
                                                <small class="wall-dimensions">
                                                    L: @salle.MurFace.Longueur m × H: @salle.MurFace.Hauteur m
                                                </small>
                                                <small class="wall-details">
                                                    @salle.MurFace.Equipements?.Count équipements
                                                    @salle.MurFace.Capteurs?.Count capteurs
                                                </small>
                                            </div>
                                        }
                                        else
                                        {
                                            <small class="text-muted">Non défini</small>
                                        }
                                    </div>

                                    <div class="wall-middle-container">
                                        <!-- Mur Gauche -->
                                        <div class="wall wall-left" @onclick="() => EditWall(salle.MurGauche)">
                                            <span class="wall-label">Mur Gauche</span>
                                            @if (salle.MurGauche != null)
                                            {
                                                <div class="wall-info">
                                                    <small class="wall-name">@salle.MurGauche.Nom</small>
                                                    <small class="wall-dimensions">
                                                        L: @salle.MurGauche.Longueur m × H: @salle.MurGauche.Hauteur m
                                                    </small>
                                                    <small class="wall-details">
                                                        @salle.MurGauche.Equipements?.Count équipements
                                                        @salle.MurGauche.Capteurs?.Count capteurs
                                                    </small>
                                                </div>
                                            }
                                            else
                                            {
                                                <small class="text-muted">Non défini</small>
                                            }
                                        </div>

                                        <!-- Zone centrale -->
                                        <div class="room-center">
                                            <span>@salle.Nom</span>
                                        </div>

                                        <!-- Mur Droit -->
                                        <div class="wall wall-right" @onclick="() => EditWall(salle.MurDroite)">
                                            <span class="wall-label">Mur Droit</span>
                                            @if (salle.MurDroite != null)
                                            {
                                                <div class="wall-info">
                                                    <small class="wall-name">@salle.MurDroite.Nom</small>
                                                    <small class="wall-dimensions">
                                                        L: @salle.MurDroite.Longueur m × H: @salle.MurDroite.Hauteur m
                                                    </small>
                                                    <small class="wall-details">
                                                        @salle.MurDroite.Equipements?.Count équipements
                                                        @salle.MurDroite.Capteurs?.Count capteurs
                                                    </small>
                                                </div>
                                            }
                                            else
                                            {
                                                <small class="text-muted">Non défini</small>
                                            }
                                        </div>
                                    </div>

                                    <!-- Mur du Bas (Entrée) -->
                                    <div class="wall wall-bottom" @onclick="() => EditWall(salle.MurEntree)">
                                        <span class="wall-label">Mur Entrée</span>
                                        @if (salle.MurEntree != null)
                                        {
                                            <div class="wall-info">
                                                <small class="wall-name">@salle.MurEntree.Nom</small>
                                                <small class="wall-dimensions">
                                                    L: @salle.MurEntree.Longueur m × H: @salle.MurEntree.Hauteur m
                                                </small>
                                                <small class="wall-details">
                                                    @salle.MurEntree.Equipements?.Count équipements
                                                    @salle.MurEntree.Capteurs?.Count capteurs
                                                </small>
                                            </div>
                                        }
                                        else
                                        {
                                            <small class="text-muted">Non défini</small>
                                        }
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            }
        </div>
    }

    <!-- Modal pour Ajout/Modification de Salle -->
    @if (showModal)
    {
        <div class="modal fade show" style="display: block;" tabindex="-1">
            <div class="modal-dialog modal-lg">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">@(isNewSalle ? "Nouvelle Salle" : "Modifier la Salle")</h5>
                        <button type="button" class="btn-close" @onclick="CloseModal"></button>
                    </div>
                    <div class="modal-body">
                        <EditForm Model="@currentSalle" OnValidSubmit="HandleValidSubmit">
                            <DataAnnotationsValidator />
                            <ValidationSummary />

                            <div class="row">
                                <div class="col-md-6 mb-3">
                                    <label class="form-label">Nom</label>
                                    <InputText class="form-control" @bind-Value="currentSalle.Nom" />
                                    <ValidationMessage For="@(() => currentSalle.Nom)" />
                                </div>

                                <div class="col-md-6 mb-3">
                                    <label class="form-label">Surface (m²)</label>
                                    <InputNumber class="form-control" @bind-Value="currentSalle.Surface" />
                                    <ValidationMessage For="@(() => currentSalle.Surface)" />
                                </div>

                                <div class="col-md-6 mb-3">
                                    <label class="form-label">Bâtiment</label>
                                    <InputSelect class="form-control" @bind-Value="currentSalle.BatimentId">
                                        @foreach (var batiment in ViewModel.Batiments)
                                        {
                                            <option value="@batiment.BatimentId">@batiment.Nom</option>
                                        }
                                    </InputSelect>
                                </div>

                                <div class="col-12">
                                    <h6 class="mb-3">Configuration des Murs</h6>

                                    <div class="row g-3">
                                        <!-- Mur Face -->
                                        <div class="col-md-6">
                                            <div class="card">
                                                <div class="card-header">Mur Face</div>
                                                <div class="card-body">
                                                    <div class="mb-2">
                                                        <label class="form-label">Type</label>
                                                        <InputSelect class="form-control" @bind-Value="currentSalle.MurFaceId">
                                                            <option value="">Sélectionner un type</option>
                                                            @foreach (var type in Enum.GetValues(typeof(TypeMur)))
                                                            {
                                                                <option value="@type">@type</option>
                                                            }
                                                        </InputSelect>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>

                                        <!-- Mur Entrée -->
                                        <div class="col-md-6">
                                            <div class="card">
                                                <div class="card-header">Mur Entrée</div>
                                                <div class="card-body">
                                                    <div class="mb-2">
                                                        <label class="form-label">Type</label>
                                                        <InputSelect class="form-control" @bind-Value="currentSalle.MurEntreeId">
                                                            <option value="">Sélectionner un type</option>
                                                            @foreach (var type in Enum.GetValues(typeof(TypeMur)))
                                                            {
                                                                <option value="@type">@type</option>
                                                            }
                                                        </InputSelect>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>

                                        <!-- Mur Gauche -->
                                        <div class="col-md-6">
                                            <div class="card">
                                                <div class="card-header">Mur Gauche</div>
                                                <div class="card-body">
                                                    <div class="mb-2">
                                                        <label class="form-label">Type</label>
                                                        <InputSelect class="form-control" @bind-Value="currentSalle.MurGaucheId">
                                                            <option value="">Sélectionner un type</option>
                                                            @foreach (var type in Enum.GetValues(typeof(TypeMur)))
                                                            {
                                                                <option value="@type">@type</option>
                                                            }
                                                        </InputSelect>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>

                                        <!-- Mur Droit -->
                                        <div class="col-md-6">
                                            <div class="card">
                                                <div class="card-header">Mur Droit</div>
                                                <div class="card-body">
                                                    <div class="mb-2">
                                                        <label class="form-label">Type</label>
                                                        <InputSelect class="form-control" @bind-Value="currentSalle.MurDroiteId">
                                                            <option value="">Sélectionner un type</option>
                                                            @foreach (var type in Enum.GetValues(typeof(TypeMur)))
                                                            {
                                                                <option value="@type">@type</option>
                                                            }
                                                        </InputSelect>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>

                            <div class="mt-4">
                                <button type="submit" class="btn btn-primary me-2">Enregistrer</button>
                                <button type="button" class="btn btn-secondary" @onclick="CloseModal">Annuler</button>
                            </div>
                        </EditForm>
                    </div>
                </div>
            </div>
        </div>
        <div class="modal-backdrop fade show"></div>
    }

    <!-- Modal de confirmation pour la suppression -->
    @if (showDeleteConfirmation)
    {
        <div class="modal fade show" style="display: block;" tabindex="-1">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">Confirmer la suppression</h5>
                        <button type="button" class="btn-close" @onclick="() => showDeleteConfirmation = false"></button>
                    </div>
                    <div class="modal-body">
                        <p>Êtes-vous sûr de vouloir supprimer cette salle ?</p>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" @onclick="() => showDeleteConfirmation = false">Annuler</button>
                        <button type="button" class="btn btn-danger" @onclick="ConfirmDelete">Supprimer</button>
                    </div>
                </div>
            </div>
        </div>
        <div class="modal-backdrop fade show"></div>
    }

    @if (showWallModal)
    {
        <div class="modal fade show" style="display: block;" tabindex="-1">
            <div class="modal-dialog modal-lg">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">Modifier le Mur</h5>
                        <button type="button" class="btn-close" @onclick="CloseWallModal"></button>
                    </div>
                    <div class="modal-body">
                        <div class="accordion" id="wallAccordion">
                            <!-- Informations générales du mur -->
                            <div class="accordion-item">
                                <h2 class="accordion-header">
                                    <button class="accordion-button" type="button" data-bs-toggle="collapse" data-bs-target="#generalInfo">
                                        Informations générales
                                    </button>
                                </h2>
                                <div id="generalInfo" class="accordion-collapse collapse show">
                                    <div class="accordion-body">
                                        <EditForm Model="@currentMur" OnValidSubmit="HandleWallSubmit">
                                            <DataAnnotationsValidator />
                                            <ValidationSummary />

                                            <div class="mb-3">
                                                <label class="form-label">Nom</label>
                                                <InputText class="form-control" @bind-Value="currentMur.Nom" />
                                                <ValidationMessage For="@(() => currentMur.Nom)" />
                                            </div>

                                            <div class="mb-3">
                                                <label class="form-label">Longueur (m)</label>
                                                <InputNumber class="form-control" @bind-Value="currentMur.Longueur" />
                                                <ValidationMessage For="@(() => currentMur.Longueur)" />
                                            </div>

                                            <div class="mb-3">
                                                <label class="form-label">Hauteur (m)</label>
                                                <InputNumber class="form-control" @bind-Value="currentMur.Hauteur" />
                                                <ValidationMessage For="@(() => currentMur.Hauteur)" />
                                            </div>

                                            <div class="mb-3">
                                                <label class="form-label">Type de Mur</label>
                                                <InputSelect class="form-control" @bind-Value="currentMur.Type">
                                                    @foreach (var type in Enum.GetValues(typeof(TypeMur)))
                                                    {
                                                        <option value="@type">@type</option>
                                                    }
                                                </InputSelect>
                                            </div>

                                            <button type="submit" class="btn btn-primary">Enregistrer</button>
                                        </EditForm>
                                    </div>
                                </div>
                            </div>

                            <!-- Gestion des Capteurs -->
                            <div class="accordion-item">
                                <h2 class="accordion-header">
                                    <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#capteurs">
                                        Capteurs (@(currentMur.Capteurs?.Count ?? 0))
                                    </button>
                                </h2>
                                <div id="capteurs" class="accordion-collapse collapse">
                                    <div class="accordion-body">
                                        <div class="d-flex justify-content-between mb-3">
                                            <h6>Liste des capteurs</h6>
                                            <button class="btn btn-sm btn-primary" @onclick="() => AddNewCapteur()">
                                                <i class="fas fa-plus"></i> Ajouter un capteur
                                            </button>
                                        </div>

                                        @if (currentMur.Capteurs?.Any() != true)
                                        {
                                            <div class="alert alert-info">Aucun capteur installé sur ce mur.</div>
                                        }
                                        else
                                        {
                                            <div class="list-group">
                                                @foreach (var capteur in currentMur.Capteurs)
                                                {
                                                    <div class="list-group-item">
                                                        <div class="d-flex justify-content-between align-items-center">
                                                            <div>
                                                                <h6 class="mb-1">@capteur.Nom</h6>
                                                                <small>Position: X:@capteur.PositionX m, Y:@capteur.PositionY m</small>
                                                            </div>
                                                            <div>
                                                                <button class="btn btn-sm btn-warning me-2" @onclick="() => EditCapteur(capteur)">
                                                                    <i class="bi bi-pencil"></i>
                                                                </button>
                                                                <button class="btn btn-sm btn-danger" @onclick="() => DeleteCapteur(capteur)">
                                                                    <i class="bi bi-trash"></i>
                                                                </button>
                                                            </div>
                                                        </div>
                                                    </div>
                                                }
                                            </div>
                                        }
                                    </div>
                                </div>
                            </div>

                            <!-- Gestion des Équipements -->
                            <div class="accordion-item">
                                <h2 class="accordion-header">
                                    <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#equipements">
                                        Équipements (@(currentMur.Equipements?.Count ?? 0))
                                    </button>
                                </h2>
                                <div id="equipements" class="accordion-collapse collapse">
                                    <div class="accordion-body">
                                        <div class="d-flex justify-content-between mb-3">
                                            <h6>Liste des équipements</h6>
                                            <button class="btn btn-sm btn-primary" @onclick="() => AddNewEquipement()">
                                                <i class="fas fa-plus"></i> Ajouter un équipement
                                            </button>
                                        </div>

                                        @if (currentMur.Equipements?.Any() != true)
                                        {
                                            <div class="alert alert-info">Aucun équipement installé sur ce mur.</div>
                                        }
                                        else
                                        {
                                            <div class="list-group">
                                                @foreach (var equipement in currentMur.Equipements)
                                                {
                                                    <div class="list-group-item">
                                                        <div class="d-flex justify-content-between align-items-center">
                                                            <div>
                                                                <h6 class="mb-1">@equipement.Nom</h6>
                                                                <small>Position: X:@equipement.PositionX m, Y:@equipement.PositionY m</small>
                                                            </div>
                                                            <div>
                                                                <button class="btn btn-sm btn-warning me-2" @onclick="() => EditEquipement(equipement)">
                                                                    <i class="bi bi-pencil"></i>
                                                                </button>
                                                                <button class="btn btn-sm btn-danger" @onclick="() => DeleteEquipement(equipement)">
                                                                    <i class="bi bi-trash"></i>
                                                                </button>
                                                            </div>
                                                        </div>
                                                    </div>
                                                }
                                            </div>
                                        }
                                    </div>
                                </div>
                            </div>
                        </div>

                        <div class="modal-footer">
                            <button type="button" class="btn btn-secondary" @onclick="CloseWallModal">Fermer</button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="modal-backdrop fade show"></div>
    }

    <!-- Modal pour l'édition/ajout de capteur -->
    @if (showCapteurModal)
    {
        <div class="modal fade show" style="display: block;" tabindex="-1">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">@(isNewCapteur ? "Nouveau capteur" : "Modifier le capteur")</h5>
                        <button type="button" class="btn-close" @onclick="CloseCapteurModal"></button>
                    </div>
                    <div class="modal-body">
                        <EditForm Model="@currentCapteur" OnValidSubmit="HandleCapteurSubmit">
                            <DataAnnotationsValidator />
                            <ValidationSummary />

                            <div class="mb-3">
                                <label class="form-label">Nom</label>
                                <InputText class="form-control" @bind-Value="currentCapteur.Nom" />
                            </div>


                            <div class="row">
                                <div class="col-md-6 mb-3">
                                    <label class="form-label">Position X (m)</label>
                                    <InputNumber class="form-control" @bind-Value="currentCapteur.PositionX" />
                                </div>
                                <div class="col-md-6 mb-3">
                                    <label class="form-label">Position Y (m)</label>
                                    <InputNumber class="form-control" @bind-Value="currentCapteur.PositionY" />
                                </div>
                            </div>

                            <button type="submit" class="btn btn-primary">Enregistrer</button>
                            <button type="button" class="btn btn-secondary" @onclick="CloseCapteurModal">Annuler</button>
                        </EditForm>
                    </div>
                </div>
            </div>
        </div>
        <div class="modal-backdrop fade show"></div>
    }

    <!-- Modal pour l'édition/ajout d'équipement -->
    @if (showEquipementModal)
    {
        <div class="modal fade show" style="display: block;" tabindex="-1">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">@(isNewEquipement ? "Nouvel équipement" : "Modifier l'équipement")</h5>
                        <button type="button" class="btn-close" @onclick="CloseEquipementModal"></button>
                    </div>
                    <div class="modal-body">
                        <EditForm Model="@currentEquipement" OnValidSubmit="HandleEquipementSubmit">
                            <DataAnnotationsValidator />
                            <ValidationSummary />

                            <div class="mb-3">
                                <label class="form-label">Nom</label>
                                <InputText class="form-control" @bind-Value="currentEquipement.Nom" />
                            </div>

                            <div class="row">
                                <div class="col-md-6 mb-3">
                                    <label class="form-label">Position X (m)</label>
                                    <InputNumber class="form-control" @bind-Value="currentEquipement.PositionX" />
                                </div>
                                <div class="col-md-6 mb-3">
                                    <label class="form-label">Position Y (m)</label>
                                    <InputNumber class="form-control" @bind-Value="currentEquipement.PositionY" />
                                </div>
                            </div>

                            <button type="submit" class="btn btn-primary">Enregistrer</button>
                            <button type="button" class="btn btn-secondary" @onclick="CloseEquipementModal">Annuler</button>
                        </EditForm>
                    </div>
                </div>
            </div>
        </div>
        <div class="modal-backdrop fade show"></div>
    }

</div>

<style>
    .room-walls-container {
        padding: 1rem;
    }

    .room-layout {
        display: flex;
        flex-direction: column;
        gap: 0.5rem;
        max-width: 400px;
        margin: 0 auto;
    }

    .wall {
        background-color: #2b3035; /* Fond foncé */
        border: 1px solid #1a1d20; /* Bordure plus foncée */
        padding: 0.75rem;
        text-align: center;
        cursor: pointer;
        transition: all 0.2s;
        border-radius: 4px;
        min-height: 85px;
        display: flex;
        flex-direction: column;
        justify-content: center;
        color: #ffffff; /* Texte blanc pour meilleur contraste */
    }

        .wall:hover {
            background-color: #373b3e; /* Couleur hover légèrement plus claire */
            transform: scale(1.02);
        }

    .wall-middle-container {
        display: flex;
        gap: 0.5rem;
        justify-content: space-between;
        align-items: stretch;
        min-height: 120px;
    }

    .wall-left, .wall-right {
        width: 100px;
        display: flex;
        flex-direction: column;
        justify-content: center;
    }

    .wall-info {
        display: flex;
        flex-direction: column;
        gap: 0.25rem;
    }

    .wall-name {
        font-weight: 500;
        color: #e9ecef; /* Couleur claire pour le nom */
    }

    .wall-dimensions {
        color: #adb5bd; /* Gris clair pour les dimensions */
        font-size: 0.85rem;
    }

    .wall-details {
        color: #adb5bd; /* Gris clair pour les détails */
        font-size: 0.8rem;
    }

    .room-center {
        flex-grow: 1;
        display: flex;
        align-items: center;
        justify-content: center;
        background-color: #6F7377; /* Centre plus foncé */
        color: #ffffff; /* Texte blanc */
        border-radius: 4px;
        padding: 1.5rem;
    }

    .wall-label {
        font-weight: bold;
        display: block;
        margin-bottom: 0.25rem;
        color: #ffffff; /* Texte blanc pour les labels */
    }

    .wall small {
        display: block;
        color: #adb5bd; /* Gris clair pour le texte small */
    }

    /* Pour le texte "Non défini" */
    .wall .text-muted {
        color: #6c757d !important; /* Gris plus visible sur fond foncé */
    }
</style>

@code {
    private bool showModal = false;
    private bool showWallModal = false;
    private bool showDeleteConfirmation = false;
    private bool showCapteurModal = false;
    private bool showEquipementModal = false;
    private bool isNewSalle = false;
    private bool isNewCapteur = false;
    private bool isNewEquipement = false;
    private Salle currentSalle = new();
    private Salle salleToDelete;
    private Mur currentMur;
    private Capteur currentCapteur = new();
    private Equipement currentEquipement = new();

    protected override async Task OnInitializedAsync()
    {
        await ViewModel.LoadDataAsync();
    }

    private void EditSalle(Salle salle)
    {
        currentSalle = new Salle
            {
                SalleId = salle.SalleId,
                Nom = salle.Nom,
                Surface = salle.Surface,
                TypeSalleId = salle.TypeSalleId,
                BatimentId = salle.BatimentId,
                MurFaceId = salle.MurFaceId,
                MurEntreeId = salle.MurEntreeId,
                MurGaucheId = salle.MurGaucheId,
                MurDroiteId = salle.MurDroiteId
            };
        isNewSalle = false;
        showModal = true;
    }

    private void DeleteSalle(Salle salle)
    {
        salleToDelete = salle;
        showDeleteConfirmation = true;
    }

    private async Task ConfirmDelete()
    {
        if (salleToDelete != null)
        {
            if (await ViewModel.DeleteSalleAsync(salleToDelete.SalleId))
            {
                showDeleteConfirmation = false;
            }
        }
    }

    private void EditWall(Mur mur)
    {
        if (mur != null)
        {
            currentMur = new Mur
                {
                    MurId = mur.MurId,
                    Nom = mur.Nom,
                    Longueur = mur.Longueur,
                    Hauteur = mur.Hauteur,
                    Type = mur.Type,
                    Equipements = new List<Equipement>(mur.Equipements ?? new List<Equipement>()),
                    Capteurs = new List<Capteur>(mur.Capteurs ?? new List<Capteur>())
                };
            showWallModal = true;
        }
        else
        {
            currentMur = new Mur
                {
                    Equipements = new List<Equipement>(),
                    Capteurs = new List<Capteur>()
                };
            showWallModal = true;
        }
    }

    private async Task HandleValidSubmit()
    {
        bool success;
        if (isNewSalle)
        {
            success = await ViewModel.AddSalleAsync(currentSalle);
        }
        else
        {
            success = await ViewModel.UpdateSalleAsync(currentSalle);
        }
        if (success)
        {
            showModal = false;
        }
    }

    private async Task HandleWallSubmit()
    {
        if (currentMur != null)
        {
            await ViewModel.UpdateMurAsync(currentMur);
            await ViewModel.LoadDataAsync(); // Recharger les données
            showWallModal = false;
        }
    }

    private void AddNewCapteur()
    {
        currentCapteur = new Capteur { MurId = currentMur.MurId };
        isNewCapteur = true;
        showCapteurModal = true;
    }

    private void EditCapteur(Capteur capteur)
    {
        currentCapteur = new Capteur
            {
                CapteurId = capteur.CapteurId,
                Nom = capteur.Nom,
                PositionX = capteur.PositionX,
                PositionY = capteur.PositionY,
                MurId = capteur.MurId
            };
        isNewCapteur = false;
        showCapteurModal = true;
    }

    private async Task DeleteCapteur(Capteur capteur)
    {
        if (await ViewModel.DeleteCapteurAsync(capteur.CapteurId))
        {
            currentMur.Capteurs.Remove(capteur);
            StateHasChanged();
        }
    }

    private async Task HandleCapteurSubmit()
    {
        if (isNewCapteur)
        {
            if (await ViewModel.AddCapteurAsync(currentCapteur))
            {
                currentMur.Capteurs.Add(currentCapteur);
                showCapteurModal = false;
            }
        }
        else
        {
            if (await ViewModel.UpdateCapteurAsync(currentCapteur))
            {
                var index = currentMur.Capteurs.FindIndex(c => c.CapteurId == currentCapteur.CapteurId);
                if (index != -1)
                {
                    currentMur.Capteurs[index] = currentCapteur;
                }
                showCapteurModal = false;
            }
        }
    }

    private void AddNewEquipement()
    {
        currentEquipement = new Equipement { MurId = currentMur.MurId };
        isNewEquipement = true;
        showEquipementModal = true;
    }

    private void EditEquipement(Equipement equipement)
    {
        currentEquipement = new Equipement
            {
                EquipementId = equipement.EquipementId,
                Nom = equipement.Nom,
                PositionX = equipement.PositionX,
                PositionY = equipement.PositionY,
                MurId = equipement.MurId
            };
        isNewEquipement = false;
        showEquipementModal = true;
    }

    private async Task DeleteEquipement(Equipement equipement)
    {
        if (await ViewModel.DeleteEquipementAsync(equipement.EquipementId))
        {
            currentMur.Equipements.Remove(equipement);
            StateHasChanged();
        }
    }

    private async Task HandleEquipementSubmit()
    {
        if (isNewEquipement)
        {
            if (await ViewModel.AddEquipementAsync(currentEquipement))
            {
                currentMur.Equipements.Add(currentEquipement);
                showEquipementModal = false;
            }
        }
        else
        {
            if (await ViewModel.UpdateEquipementAsync(currentEquipement))
            {
                var index = currentMur.Equipements.FindIndex(e => e.EquipementId == currentEquipement.EquipementId);
                if (index != -1)
                {
                    currentMur.Equipements[index] = currentEquipement;
                }
                showEquipementModal = false;
            }
        }
    }

    private void CloseModal()
    {
        showModal = false;
        showWallModal = false;
        currentSalle = new();
        ViewModel.ErrorMessage = null;
        ViewModel.SuccessMessage = null;
    }

    private void CloseWallModal()
    {
        showWallModal = false;
        currentMur = null;
        ViewModel.ErrorMessage = null;
    }

    private void CloseCapteurModal()
    {
        showCapteurModal = false;
        currentCapteur = new();
        ViewModel.ErrorMessage = null;
    }

    private void CloseEquipementModal()
    {
        showEquipementModal = false;
        currentEquipement = new();
        ViewModel.ErrorMessage = null;
    }
}